// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/apis/errordetails/v2/errordetails.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PeerDownloadBackToSourceFailed with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PeerDownloadBackToSourceFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PeerDownloadBackToSourceFailed with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PeerDownloadBackToSourceFailedMultiError, or nil if none found.
func (m *PeerDownloadBackToSourceFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *PeerDownloadBackToSourceFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Temporary

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PeerDownloadBackToSourceFailedValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PeerDownloadBackToSourceFailedValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeerDownloadBackToSourceFailedValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return PeerDownloadBackToSourceFailedMultiError(errors)
	}

	return nil
}

// PeerDownloadBackToSourceFailedMultiError is an error wrapping multiple
// validation errors returned by PeerDownloadBackToSourceFailed.ValidateAll()
// if the designated constraints aren't met.
type PeerDownloadBackToSourceFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerDownloadBackToSourceFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerDownloadBackToSourceFailedMultiError) AllErrors() []error { return m }

// PeerDownloadBackToSourceFailedValidationError is the validation error
// returned by PeerDownloadBackToSourceFailed.Validate if the designated
// constraints aren't met.
type PeerDownloadBackToSourceFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerDownloadBackToSourceFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerDownloadBackToSourceFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerDownloadBackToSourceFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerDownloadBackToSourceFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerDownloadBackToSourceFailedValidationError) ErrorName() string {
	return "PeerDownloadBackToSourceFailedValidationError"
}

// Error satisfies the builtin error interface
func (e PeerDownloadBackToSourceFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeerDownloadBackToSourceFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerDownloadBackToSourceFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerDownloadBackToSourceFailedValidationError{}

// Validate checks the field values on PieceDownloadFailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PieceDownloadFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PieceDownloadFailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PieceDownloadFailedMultiError, or nil if none found.
func (m *PieceDownloadFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *PieceDownloadFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Temporary

	if utf8.RuneCountInString(m.GetParentId()) < 1 {
		err := PieceDownloadFailedValidationError{
			field:  "ParentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return PieceDownloadFailedMultiError(errors)
	}

	return nil
}

// PieceDownloadFailedMultiError is an error wrapping multiple validation
// errors returned by PieceDownloadFailed.ValidateAll() if the designated
// constraints aren't met.
type PieceDownloadFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PieceDownloadFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PieceDownloadFailedMultiError) AllErrors() []error { return m }

// PieceDownloadFailedValidationError is the validation error returned by
// PieceDownloadFailed.Validate if the designated constraints aren't met.
type PieceDownloadFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PieceDownloadFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PieceDownloadFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PieceDownloadFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PieceDownloadFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PieceDownloadFailedValidationError) ErrorName() string {
	return "PieceDownloadFailedValidationError"
}

// Error satisfies the builtin error interface
func (e PieceDownloadFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPieceDownloadFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PieceDownloadFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PieceDownloadFailedValidationError{}

// Validate checks the field values on PieceInfoSyncFailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PieceInfoSyncFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PieceInfoSyncFailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PieceInfoSyncFailedMultiError, or nil if none found.
func (m *PieceInfoSyncFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *PieceInfoSyncFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Temporary

	if utf8.RuneCountInString(m.GetParentId()) < 1 {
		err := PieceInfoSyncFailedValidationError{
			field:  "ParentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return PieceInfoSyncFailedMultiError(errors)
	}

	return nil
}

// PieceInfoSyncFailedMultiError is an error wrapping multiple validation
// errors returned by PieceInfoSyncFailed.ValidateAll() if the designated
// constraints aren't met.
type PieceInfoSyncFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PieceInfoSyncFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PieceInfoSyncFailedMultiError) AllErrors() []error { return m }

// PieceInfoSyncFailedValidationError is the validation error returned by
// PieceInfoSyncFailed.Validate if the designated constraints aren't met.
type PieceInfoSyncFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PieceInfoSyncFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PieceInfoSyncFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PieceInfoSyncFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PieceInfoSyncFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PieceInfoSyncFailedValidationError) ErrorName() string {
	return "PieceInfoSyncFailedValidationError"
}

// Error satisfies the builtin error interface
func (e PieceInfoSyncFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPieceInfoSyncFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PieceInfoSyncFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PieceInfoSyncFailedValidationError{}

// Validate checks the field values on ScheduleFailed with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScheduleFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleFailed with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScheduleFailedMultiError,
// or nil if none found.
func (m *ScheduleFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if len(errors) > 0 {
		return ScheduleFailedMultiError(errors)
	}

	return nil
}

// ScheduleFailedMultiError is an error wrapping multiple validation errors
// returned by ScheduleFailed.ValidateAll() if the designated constraints
// aren't met.
type ScheduleFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleFailedMultiError) AllErrors() []error { return m }

// ScheduleFailedValidationError is the validation error returned by
// ScheduleFailed.Validate if the designated constraints aren't met.
type ScheduleFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleFailedValidationError) ErrorName() string { return "ScheduleFailedValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleFailedValidationError{}
