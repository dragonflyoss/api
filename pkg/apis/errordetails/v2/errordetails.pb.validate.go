// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/apis/errordetails/v2/errordetails.proto

package errordetails

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DownloadPeerBackToSourceFailed with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadPeerBackToSourceFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadPeerBackToSourceFailed with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DownloadPeerBackToSourceFailedMultiError, or nil if none found.
func (m *DownloadPeerBackToSourceFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadPeerBackToSourceFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if len(errors) > 0 {
		return DownloadPeerBackToSourceFailedMultiError(errors)
	}

	return nil
}

// DownloadPeerBackToSourceFailedMultiError is an error wrapping multiple
// validation errors returned by DownloadPeerBackToSourceFailed.ValidateAll()
// if the designated constraints aren't met.
type DownloadPeerBackToSourceFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadPeerBackToSourceFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadPeerBackToSourceFailedMultiError) AllErrors() []error { return m }

// DownloadPeerBackToSourceFailedValidationError is the validation error
// returned by DownloadPeerBackToSourceFailed.Validate if the designated
// constraints aren't met.
type DownloadPeerBackToSourceFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadPeerBackToSourceFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadPeerBackToSourceFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadPeerBackToSourceFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadPeerBackToSourceFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadPeerBackToSourceFailedValidationError) ErrorName() string {
	return "DownloadPeerBackToSourceFailedValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadPeerBackToSourceFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadPeerBackToSourceFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadPeerBackToSourceFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadPeerBackToSourceFailedValidationError{}

// Validate checks the field values on DownloadPieceBackToSourceFailed with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadPieceBackToSourceFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadPieceBackToSourceFailed with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DownloadPieceBackToSourceFailedMultiError, or nil if none found.
func (m *DownloadPieceBackToSourceFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadPieceBackToSourceFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Temporary

	if m.GetExtendAttribute() == nil {
		err := DownloadPieceBackToSourceFailedValidationError{
			field:  "ExtendAttribute",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExtendAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DownloadPieceBackToSourceFailedValidationError{
					field:  "ExtendAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DownloadPieceBackToSourceFailedValidationError{
					field:  "ExtendAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtendAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DownloadPieceBackToSourceFailedValidationError{
				field:  "ExtendAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPieceNumber() < 0 {
		err := DownloadPieceBackToSourceFailedValidationError{
			field:  "PieceNumber",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return DownloadPieceBackToSourceFailedMultiError(errors)
	}

	return nil
}

// DownloadPieceBackToSourceFailedMultiError is an error wrapping multiple
// validation errors returned by DownloadPieceBackToSourceFailed.ValidateAll()
// if the designated constraints aren't met.
type DownloadPieceBackToSourceFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadPieceBackToSourceFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadPieceBackToSourceFailedMultiError) AllErrors() []error { return m }

// DownloadPieceBackToSourceFailedValidationError is the validation error
// returned by DownloadPieceBackToSourceFailed.Validate if the designated
// constraints aren't met.
type DownloadPieceBackToSourceFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadPieceBackToSourceFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadPieceBackToSourceFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadPieceBackToSourceFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadPieceBackToSourceFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadPieceBackToSourceFailedValidationError) ErrorName() string {
	return "DownloadPieceBackToSourceFailedValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadPieceBackToSourceFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadPieceBackToSourceFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadPieceBackToSourceFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadPieceBackToSourceFailedValidationError{}

// Validate checks the field values on DownloadPieceFailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadPieceFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadPieceFailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadPieceFailedMultiError, or nil if none found.
func (m *DownloadPieceFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadPieceFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Temporary

	if m.GetExtendAttribute() == nil {
		err := DownloadPieceFailedValidationError{
			field:  "ExtendAttribute",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExtendAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DownloadPieceFailedValidationError{
					field:  "ExtendAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DownloadPieceFailedValidationError{
					field:  "ExtendAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtendAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DownloadPieceFailedValidationError{
				field:  "ExtendAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetParentId()) < 1 {
		err := DownloadPieceFailedValidationError{
			field:  "ParentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPieceNumber() < 0 {
		err := DownloadPieceFailedValidationError{
			field:  "PieceNumber",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return DownloadPieceFailedMultiError(errors)
	}

	return nil
}

// DownloadPieceFailedMultiError is an error wrapping multiple validation
// errors returned by DownloadPieceFailed.ValidateAll() if the designated
// constraints aren't met.
type DownloadPieceFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadPieceFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadPieceFailedMultiError) AllErrors() []error { return m }

// DownloadPieceFailedValidationError is the validation error returned by
// DownloadPieceFailed.Validate if the designated constraints aren't met.
type DownloadPieceFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadPieceFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadPieceFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadPieceFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadPieceFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadPieceFailedValidationError) ErrorName() string {
	return "DownloadPieceFailedValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadPieceFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadPieceFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadPieceFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadPieceFailedValidationError{}

// Validate checks the field values on SchedulePeerForbidden with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SchedulePeerForbidden) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SchedulePeerForbidden with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SchedulePeerForbiddenMultiError, or nil if none found.
func (m *SchedulePeerForbidden) ValidateAll() error {
	return m.validate(true)
}

func (m *SchedulePeerForbidden) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if len(errors) > 0 {
		return SchedulePeerForbiddenMultiError(errors)
	}

	return nil
}

// SchedulePeerForbiddenMultiError is an error wrapping multiple validation
// errors returned by SchedulePeerForbidden.ValidateAll() if the designated
// constraints aren't met.
type SchedulePeerForbiddenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchedulePeerForbiddenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchedulePeerForbiddenMultiError) AllErrors() []error { return m }

// SchedulePeerForbiddenValidationError is the validation error returned by
// SchedulePeerForbidden.Validate if the designated constraints aren't met.
type SchedulePeerForbiddenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchedulePeerForbiddenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchedulePeerForbiddenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchedulePeerForbiddenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchedulePeerForbiddenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchedulePeerForbiddenValidationError) ErrorName() string {
	return "SchedulePeerForbiddenValidationError"
}

// Error satisfies the builtin error interface
func (e SchedulePeerForbiddenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchedulePeerForbidden.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchedulePeerForbiddenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchedulePeerForbiddenValidationError{}

// Validate checks the field values on SchedulePeerFailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SchedulePeerFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SchedulePeerFailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SchedulePeerFailedMultiError, or nil if none found.
func (m *SchedulePeerFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *SchedulePeerFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	if len(errors) > 0 {
		return SchedulePeerFailedMultiError(errors)
	}

	return nil
}

// SchedulePeerFailedMultiError is an error wrapping multiple validation errors
// returned by SchedulePeerFailed.ValidateAll() if the designated constraints
// aren't met.
type SchedulePeerFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchedulePeerFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchedulePeerFailedMultiError) AllErrors() []error { return m }

// SchedulePeerFailedValidationError is the validation error returned by
// SchedulePeerFailed.Validate if the designated constraints aren't met.
type SchedulePeerFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchedulePeerFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchedulePeerFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchedulePeerFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchedulePeerFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchedulePeerFailedValidationError) ErrorName() string {
	return "SchedulePeerFailedValidationError"
}

// Error satisfies the builtin error interface
func (e SchedulePeerFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchedulePeerFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchedulePeerFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchedulePeerFailedValidationError{}

// Validate checks the field values on SyncPiecesFailed with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SyncPiecesFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncPiecesFailed with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncPiecesFailedMultiError, or nil if none found.
func (m *SyncPiecesFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncPiecesFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Temporary

	if utf8.RuneCountInString(m.GetParentId()) < 1 {
		err := SyncPiecesFailedValidationError{
			field:  "ParentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return SyncPiecesFailedMultiError(errors)
	}

	return nil
}

// SyncPiecesFailedMultiError is an error wrapping multiple validation errors
// returned by SyncPiecesFailed.ValidateAll() if the designated constraints
// aren't met.
type SyncPiecesFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncPiecesFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncPiecesFailedMultiError) AllErrors() []error { return m }

// SyncPiecesFailedValidationError is the validation error returned by
// SyncPiecesFailed.Validate if the designated constraints aren't met.
type SyncPiecesFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncPiecesFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncPiecesFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncPiecesFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncPiecesFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncPiecesFailedValidationError) ErrorName() string { return "SyncPiecesFailedValidationError" }

// Error satisfies the builtin error interface
func (e SyncPiecesFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncPiecesFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncPiecesFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncPiecesFailedValidationError{}
