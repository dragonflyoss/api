// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/apis/trainer/v1/trainer.proto

package trainer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TrainGNNRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrainGNNRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainGNNRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainGNNRequestMultiError, or nil if none found.
func (m *TrainGNNRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainGNNRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDataset()) < 1 {
		err := TrainGNNRequestValidationError{
			field:  "Dataset",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TrainGNNRequestMultiError(errors)
	}

	return nil
}

// TrainGNNRequestMultiError is an error wrapping multiple validation errors
// returned by TrainGNNRequest.ValidateAll() if the designated constraints
// aren't met.
type TrainGNNRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainGNNRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainGNNRequestMultiError) AllErrors() []error { return m }

// TrainGNNRequestValidationError is the validation error returned by
// TrainGNNRequest.Validate if the designated constraints aren't met.
type TrainGNNRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainGNNRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainGNNRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainGNNRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainGNNRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainGNNRequestValidationError) ErrorName() string { return "TrainGNNRequestValidationError" }

// Error satisfies the builtin error interface
func (e TrainGNNRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainGNNRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainGNNRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainGNNRequestValidationError{}

// Validate checks the field values on TrainMLPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrainMLPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainMLPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainMLPRequestMultiError, or nil if none found.
func (m *TrainMLPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainMLPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDataset()) < 1 {
		err := TrainMLPRequestValidationError{
			field:  "Dataset",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TrainMLPRequestMultiError(errors)
	}

	return nil
}

// TrainMLPRequestMultiError is an error wrapping multiple validation errors
// returned by TrainMLPRequest.ValidateAll() if the designated constraints
// aren't met.
type TrainMLPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainMLPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainMLPRequestMultiError) AllErrors() []error { return m }

// TrainMLPRequestValidationError is the validation error returned by
// TrainMLPRequest.Validate if the designated constraints aren't met.
type TrainMLPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainMLPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainMLPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainMLPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainMLPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainMLPRequestValidationError) ErrorName() string { return "TrainMLPRequestValidationError" }

// Error satisfies the builtin error interface
func (e TrainMLPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainMLPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainMLPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainMLPRequestValidationError{}

// Validate checks the field values on TrainRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrainRequestMultiError, or
// nil if none found.
func (m *TrainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetHostname()) < 1 {
		err := TrainRequestValidationError{
			field:  "Hostname",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := TrainRequestValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofRequestPresent := false
	switch v := m.Request.(type) {
	case *TrainRequest_TrainGnnRequest:
		if v == nil {
			err := TrainRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofRequestPresent = true

		if all {
			switch v := interface{}(m.GetTrainGnnRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrainRequestValidationError{
						field:  "TrainGnnRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrainRequestValidationError{
						field:  "TrainGnnRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTrainGnnRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainRequestValidationError{
					field:  "TrainGnnRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TrainRequest_TrainMlpRequest:
		if v == nil {
			err := TrainRequestValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofRequestPresent = true

		if all {
			switch v := interface{}(m.GetTrainMlpRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrainRequestValidationError{
						field:  "TrainMlpRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrainRequestValidationError{
						field:  "TrainMlpRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTrainMlpRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainRequestValidationError{
					field:  "TrainMlpRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofRequestPresent {
		err := TrainRequestValidationError{
			field:  "Request",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TrainRequestMultiError(errors)
	}

	return nil
}

// TrainRequestMultiError is an error wrapping multiple validation errors
// returned by TrainRequest.ValidateAll() if the designated constraints aren't met.
type TrainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainRequestMultiError) AllErrors() []error { return m }

// TrainRequestValidationError is the validation error returned by
// TrainRequest.Validate if the designated constraints aren't met.
type TrainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainRequestValidationError) ErrorName() string { return "TrainRequestValidationError" }

// Error satisfies the builtin error interface
func (e TrainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainRequestValidationError{}
