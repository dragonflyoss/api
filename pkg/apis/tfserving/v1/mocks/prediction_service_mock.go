// Code generated by MockGen. DO NOT EDIT.
// Source: ../prediction_service_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tfserving "d7y.io/api/pkg/apis/tfserving/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPredictionServiceClient is a mock of PredictionServiceClient interface.
type MockPredictionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPredictionServiceClientMockRecorder
}

// MockPredictionServiceClientMockRecorder is the mock recorder for MockPredictionServiceClient.
type MockPredictionServiceClientMockRecorder struct {
	mock *MockPredictionServiceClient
}

// NewMockPredictionServiceClient creates a new mock instance.
func NewMockPredictionServiceClient(ctrl *gomock.Controller) *MockPredictionServiceClient {
	mock := &MockPredictionServiceClient{ctrl: ctrl}
	mock.recorder = &MockPredictionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPredictionServiceClient) EXPECT() *MockPredictionServiceClientMockRecorder {
	return m.recorder
}

// Predict mocks base method.
func (m *MockPredictionServiceClient) Predict(ctx context.Context, in *tfserving.PredictRequest, opts ...grpc.CallOption) (*tfserving.PredictResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Predict", varargs...)
	ret0, _ := ret[0].(*tfserving.PredictResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Predict indicates an expected call of Predict.
func (mr *MockPredictionServiceClientMockRecorder) Predict(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Predict", reflect.TypeOf((*MockPredictionServiceClient)(nil).Predict), varargs...)
}

// MockPredictionServiceServer is a mock of PredictionServiceServer interface.
type MockPredictionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPredictionServiceServerMockRecorder
}

// MockPredictionServiceServerMockRecorder is the mock recorder for MockPredictionServiceServer.
type MockPredictionServiceServerMockRecorder struct {
	mock *MockPredictionServiceServer
}

// NewMockPredictionServiceServer creates a new mock instance.
func NewMockPredictionServiceServer(ctrl *gomock.Controller) *MockPredictionServiceServer {
	mock := &MockPredictionServiceServer{ctrl: ctrl}
	mock.recorder = &MockPredictionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPredictionServiceServer) EXPECT() *MockPredictionServiceServerMockRecorder {
	return m.recorder
}

// Predict mocks base method.
func (m *MockPredictionServiceServer) Predict(arg0 context.Context, arg1 *tfserving.PredictRequest) (*tfserving.PredictResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Predict", arg0, arg1)
	ret0, _ := ret[0].(*tfserving.PredictResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Predict indicates an expected call of Predict.
func (mr *MockPredictionServiceServerMockRecorder) Predict(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Predict", reflect.TypeOf((*MockPredictionServiceServer)(nil).Predict), arg0, arg1)
}

// MockUnsafePredictionServiceServer is a mock of UnsafePredictionServiceServer interface.
type MockUnsafePredictionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePredictionServiceServerMockRecorder
}

// MockUnsafePredictionServiceServerMockRecorder is the mock recorder for MockUnsafePredictionServiceServer.
type MockUnsafePredictionServiceServerMockRecorder struct {
	mock *MockUnsafePredictionServiceServer
}

// NewMockUnsafePredictionServiceServer creates a new mock instance.
func NewMockUnsafePredictionServiceServer(ctrl *gomock.Controller) *MockUnsafePredictionServiceServer {
	mock := &MockUnsafePredictionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePredictionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePredictionServiceServer) EXPECT() *MockUnsafePredictionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPredictionServiceServer mocks base method.
func (m *MockUnsafePredictionServiceServer) mustEmbedUnimplementedPredictionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPredictionServiceServer")
}

// mustEmbedUnimplementedPredictionServiceServer indicates an expected call of mustEmbedUnimplementedPredictionServiceServer.
func (mr *MockUnsafePredictionServiceServerMockRecorder) mustEmbedUnimplementedPredictionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPredictionServiceServer", reflect.TypeOf((*MockUnsafePredictionServiceServer)(nil).mustEmbedUnimplementedPredictionServiceServer))
}
