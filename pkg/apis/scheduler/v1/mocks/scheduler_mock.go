// Code generated by MockGen. DO NOT EDIT.
// Source: ../scheduler.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockisRegisterResult_DirectPiece is a mock of isRegisterResult_DirectPiece interface.
type MockisRegisterResult_DirectPiece struct {
	ctrl     *gomock.Controller
	recorder *MockisRegisterResult_DirectPieceMockRecorder
}

// MockisRegisterResult_DirectPieceMockRecorder is the mock recorder for MockisRegisterResult_DirectPiece.
type MockisRegisterResult_DirectPieceMockRecorder struct {
	mock *MockisRegisterResult_DirectPiece
}

// NewMockisRegisterResult_DirectPiece creates a new mock instance.
func NewMockisRegisterResult_DirectPiece(ctrl *gomock.Controller) *MockisRegisterResult_DirectPiece {
	mock := &MockisRegisterResult_DirectPiece{ctrl: ctrl}
	mock.recorder = &MockisRegisterResult_DirectPieceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisRegisterResult_DirectPiece) EXPECT() *MockisRegisterResult_DirectPieceMockRecorder {
	return m.recorder
}

// isRegisterResult_DirectPiece mocks base method.
func (m *MockisRegisterResult_DirectPiece) isRegisterResult_DirectPiece() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isRegisterResult_DirectPiece")
}

// isRegisterResult_DirectPiece indicates an expected call of isRegisterResult_DirectPiece.
func (mr *MockisRegisterResult_DirectPieceMockRecorder) isRegisterResult_DirectPiece() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRegisterResult_DirectPiece", reflect.TypeOf((*MockisRegisterResult_DirectPiece)(nil).isRegisterResult_DirectPiece))
}

// MockisPeerPacket_Errordetails is a mock of isPeerPacket_Errordetails interface.
type MockisPeerPacket_Errordetails struct {
	ctrl     *gomock.Controller
	recorder *MockisPeerPacket_ErrordetailsMockRecorder
}

// MockisPeerPacket_ErrordetailsMockRecorder is the mock recorder for MockisPeerPacket_Errordetails.
type MockisPeerPacket_ErrordetailsMockRecorder struct {
	mock *MockisPeerPacket_Errordetails
}

// NewMockisPeerPacket_Errordetails creates a new mock instance.
func NewMockisPeerPacket_Errordetails(ctrl *gomock.Controller) *MockisPeerPacket_Errordetails {
	mock := &MockisPeerPacket_Errordetails{ctrl: ctrl}
	mock.recorder = &MockisPeerPacket_ErrordetailsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisPeerPacket_Errordetails) EXPECT() *MockisPeerPacket_ErrordetailsMockRecorder {
	return m.recorder
}

// isPeerPacket_Errordetails mocks base method.
func (m *MockisPeerPacket_Errordetails) isPeerPacket_Errordetails() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isPeerPacket_Errordetails")
}

// isPeerPacket_Errordetails indicates an expected call of isPeerPacket_Errordetails.
func (mr *MockisPeerPacket_ErrordetailsMockRecorder) isPeerPacket_Errordetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isPeerPacket_Errordetails", reflect.TypeOf((*MockisPeerPacket_Errordetails)(nil).isPeerPacket_Errordetails))
}

// MockisPeerResult_Errordetails is a mock of isPeerResult_Errordetails interface.
type MockisPeerResult_Errordetails struct {
	ctrl     *gomock.Controller
	recorder *MockisPeerResult_ErrordetailsMockRecorder
}

// MockisPeerResult_ErrordetailsMockRecorder is the mock recorder for MockisPeerResult_Errordetails.
type MockisPeerResult_ErrordetailsMockRecorder struct {
	mock *MockisPeerResult_Errordetails
}

// NewMockisPeerResult_Errordetails creates a new mock instance.
func NewMockisPeerResult_Errordetails(ctrl *gomock.Controller) *MockisPeerResult_Errordetails {
	mock := &MockisPeerResult_Errordetails{ctrl: ctrl}
	mock.recorder = &MockisPeerResult_ErrordetailsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisPeerResult_Errordetails) EXPECT() *MockisPeerResult_ErrordetailsMockRecorder {
	return m.recorder
}

// isPeerResult_Errordetails mocks base method.
func (m *MockisPeerResult_Errordetails) isPeerResult_Errordetails() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isPeerResult_Errordetails")
}

// isPeerResult_Errordetails indicates an expected call of isPeerResult_Errordetails.
func (mr *MockisPeerResult_ErrordetailsMockRecorder) isPeerResult_Errordetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isPeerResult_Errordetails", reflect.TypeOf((*MockisPeerResult_Errordetails)(nil).isPeerResult_Errordetails))
}
