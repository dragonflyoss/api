/*
 *     Copyright 2022 The Dragonfly Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package scheduler;

import "pkg/apis/common/v1/common.proto";
import "pkg/apis/errordetails/v1/errordetails.proto";
import "validate/validate.proto";
import "google/protobuf/empty.proto";

option go_package = "d7y.io/api/pkg/apis/scheduler/v1";

// PeerTaskRequest represents request of RegisterPeerTask.
message PeerTaskRequest{
  // Download url.
  string url = 1 [(validate.rules).string.uri = true];
  // URL meta info.
  common.UrlMeta url_meta = 2 [(validate.rules).message.required = true];
  // Peer id and it must be global uniqueness.
  string peer_id = 3 [(validate.rules).string.min_len = 1];
  // Peer host info.
  PeerHost peer_host = 4;
  // Peer host load.
  common.HostLoad host_load = 5;
  // Whether this request is caused by migration.
  bool is_migrating = 6;
  // Pattern includes p2p, seed-peer and source.
  common.Pattern pattern = 7;
  // Task id.
  string task_id = 8;
}

// RegisterResult represents response of RegisterPeerTask.
message RegisterResult{
  // Task type.
  common.TaskType task_type = 1;
  // Task id
  string task_id = 2 [(validate.rules).string.min_len = 1];
  // File size scope.
  common.SizeScope size_scope = 3;
  // Download the only piece directly for small or tiny file.
  oneof direct_piece{
    // Return single piece info when size scope is small.
    SinglePiece single_piece = 4;
    // Return task content when size scope is tiny.
    bytes piece_content = 5;
  }
  // Task extend attribute,
  // only direct_piece will carry extend attribute.
  common.ExtendAttribute extend_attribute = 6;
}

// SinglePiece represents information of single piece.
message SinglePiece{
  // Destination peer id.
  string dst_pid = 1 [(validate.rules).string.min_len = 1];
  // Destination download address.
  string dst_addr = 2 [(validate.rules).string.min_len = 1];
  // Piece info.
  common.PieceInfo piece_info = 3;
}

// PeerHost represents information of peer host.
message PeerHost{
  // Peer host id.
  string id = 1 [(validate.rules).string.min_len = 1];
  // peer host ip
  string ip = 2 [(validate.rules).string.ip = true];
  // Port of grpc service.
  int32 rpc_port = 3 [(validate.rules).int32 = {gte: 1024, lt: 65535}];
  // Port of download server.
  int32 down_port = 4 [(validate.rules).int32 = {gte: 1024, lt: 65535}];
  // Peer hostname.
  string host_name = 5 [(validate.rules).string.hostname = true];
  // Security domain for network.
  string security_domain = 6;
  // Location path(area|country|province|city|...).
  string location = 7;
  // IDC where the peer host is located
  string idc = 8;
  // Network topology(switch|router|...).
  string net_topology = 9;
}

// PieceResult represents request of ReportPieceResult.
message PieceResult{
  // Task id.
  string task_id = 1 [(validate.rules).string.min_len = 1];
  // Source peer id.
  string src_pid = 2 [(validate.rules).string.min_len = 1];
  // Destination peer id.
  string dst_pid = 3;
  // Piece info.
  common.PieceInfo piece_info = 4;
  // Begin time of the piece downloading.
  uint64 begin_time = 5;
  // End time of the piece downloading.
  uint64 end_time = 6;
  // Whether the piece downloading is successfully.
  bool success = 7;
  // Result code.
  common.Code code = 8;
  // Peer host load.
  common.HostLoad host_load = 9;
  // Finished count.
  int32 finished_count = 10;
  // Task extend attribute,
  // only first success back source piece will carry extend attribute.
  common.ExtendAttribute extend_attribute = 11;
}

// PeerPacket represents response of ReportPieceResult.
message PeerPacket{
  message DestPeer{
    // Destination ip.
    string ip = 1 [(validate.rules).string.ip = true];
    // Port of grpc service.
    int32 rpc_port = 2 [(validate.rules).int32 = {gte: 1024, lt: 65535}];
    // Destination peer id.
    string peer_id = 3 [(validate.rules).string.min_len = 1];
  }

  // Task id.
  string task_id = 2 [(validate.rules).string.min_len = 1];
  // Source peer id.
  string src_pid = 3 [(validate.rules).string.min_len = 1];
  // Concurrent downloading count from main peer.
  int32 parallel_count = 4 [(validate.rules).int32.gte = 1];
  // Main peer.
  DestPeer main_peer = 5;
  // Candidate peers.
  repeated DestPeer candidate_peers = 6;
  // Result code.
  common.Code code = 7;
  // Error detail.
  oneof errordetails{
    // Source error.
    errordetails.SourceError source_error = 8;
  }
}

// PeerResult represents response of ReportPeerResult.
message PeerResult{
  // Task id.
  string task_id = 1 [(validate.rules).string.min_len = 1];
  // Peer id.
  string peer_id = 2 [(validate.rules).string.min_len = 1];
  // Source host ip.
  string src_ip = 3 [(validate.rules).string.ip = true];
  // Security domain.
  string security_domain = 4;
  // IDC where the peer host is located
  string idc = 5;
  // Download url.
  string url = 6 [(validate.rules).string.uri = true];
  // Total content length.
  int64 content_length = 7 [(validate.rules).int64.gte = -1];
  // Total network traffic.
  uint64 traffic = 8;
  // Total cost time.
  uint32 cost = 9;
  // Whether peer downloading file is successfully.
  bool success = 10;
  // Result code.
  common.Code code = 11;
  // Task total piece count.
  int32 total_piece_count = 12 [(validate.rules).int32.gte = -1];
  // Error detail.
  oneof errordetails{
    // Source error.
    errordetails.SourceError source_error = 13;
  }
}

// PeerTarget represents request of LeaveTask.
message PeerTarget{
  // Task id.
  string task_id = 1 [(validate.rules).string.min_len = 1];
  // Peer id.
  string peer_id = 2 [(validate.rules).string.min_len = 1];
}

// StatTaskRequest represents request of StatTask.
message StatTaskRequest{
  // Task id.
  string task_id = 1 [(validate.rules).string.min_len = 1];
}

// Task represents download task.
message Task{
  // Task id.
  string id = 1 [(validate.rules).string.min_len = 1];
  // Task type.
  common.TaskType type = 2;
  // Task content length.
  int64 content_length = 3 [(validate.rules).int64.gte = 1];
  // Task total piece count.
  int32 total_piece_count = 4 [(validate.rules).int32.gte = 1];
  // Task state.
  string state = 5 [(validate.rules).string.min_len = 1];
  // Task peer count.
  int32 peer_count = 6 [(validate.rules).int32.gte = 0];
  // Task contains available peer.
  bool hasAvailablePeer = 7;
}

// AnnounceTaskRequest represents request of AnnounceTask.
message AnnounceTaskRequest{
  // Task id.
  string task_id = 1 [(validate.rules).string.min_len = 1];
  // Download url.
  string url = 2 [(validate.rules).string = {uri: true, ignore_empty: true}];
  // URL meta info.
  common.UrlMeta url_meta = 3 [(validate.rules).message.required = true];
  // Peer host info.
  PeerHost peer_host = 4;
  // Task piece info.
  common.PiecePacket piece_packet = 5 [(validate.rules).message.required = true];
  // Task type.
  common.TaskType task_type = 6;
}

// LeaveHostRequest represents request of LeaveHost.
message LeaveHostRequest{
  // Host id.
  string id = 1 [(validate.rules).string.min_len = 1];
}

// Scheduler RPC Service.
service Scheduler{
  // RegisterPeerTask registers a peer into task.
  rpc RegisterPeerTask(PeerTaskRequest)returns(RegisterResult);

  // ReportPieceResult reports piece results and receives peer packets.
  rpc ReportPieceResult(stream PieceResult)returns(stream PeerPacket);

  // ReportPeerResult reports downloading result for the peer.
  rpc ReportPeerResult(PeerResult)returns(google.protobuf.Empty);

  // LeaveTask makes the peer leaving from task.
  rpc LeaveTask(PeerTarget)returns(google.protobuf.Empty);

  // Checks if any peer has the given task.
  rpc StatTask(StatTaskRequest)returns(Task);

  // A peer announces that it has the announced task to other peers.
  rpc AnnounceTask(AnnounceTaskRequest) returns(google.protobuf.Empty);

  // LeaveHost makes the peers leaving from host.
  rpc LeaveHost(LeaveHostRequest)returns(google.protobuf.Empty);
}
