//
//     Copyright 2022 The Dragonfly Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: pkg/apis/scheduler/v2/scheduler.proto

package v2

import (
	context "context"
	v2 "d7y.io/api/pkg/apis/common/v2"
	v21 "d7y.io/api/pkg/apis/errordetails/v2"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Peer metadata.
type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Pieces of peer.
	Pieces []*v2.Piece `protobuf:"bytes,2,rep,name=pieces,proto3" json:"pieces,omitempty"`
	// Task info.
	Task *Task `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
	// Host info.
	Host *Host `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	// Peer state.
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Peer create time.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Peer update time.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *Peer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Peer) GetPieces() []*v2.Piece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

func (x *Peer) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *Peer) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *Peer) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Peer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Peer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Task metadata.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Task type.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Task size scope.
	SizeScope v2.SizeScope `protobuf:"varint,3,opt,name=size_scope,json=sizeScope,proto3,enum=common.SizeScope" json:"size_scope,omitempty"`
	// Pieces of task.
	Pieces []*v2.Piece `protobuf:"bytes,4,rep,name=pieces,proto3" json:"pieces,omitempty"`
	// Task state.
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Task metadata.
	Metadata *v2.Metadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Task content length.
	ContentLength int64 `protobuf:"varint,7,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	// Task peer count.
	PeerCount int32 `protobuf:"varint,8,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	// Task contains available peer.
	HasAvailablePeer bool `protobuf:"varint,9,opt,name=hasAvailablePeer,proto3" json:"hasAvailablePeer,omitempty"`
	// Task create time.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Task update time.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Task) GetSizeScope() v2.SizeScope {
	if x != nil {
		return x.SizeScope
	}
	return v2.SizeScope(0)
}

func (x *Task) GetPieces() []*v2.Piece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

func (x *Task) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Task) GetMetadata() *v2.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Task) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

func (x *Task) GetPeerCount() int32 {
	if x != nil {
		return x.PeerCount
	}
	return 0
}

func (x *Task) GetHasAvailablePeer() bool {
	if x != nil {
		return x.HasAvailablePeer
	}
	return false
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Host metadata.
type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Host ipv4.
	Ipv4 string `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// Host ipv6.
	Ipv6 string `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	// Peer hostname.
	Hostname string `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Port of grpc service.
	Port int32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Port of download server.
	DownloadPort int32 `protobuf:"varint,6,opt,name=download_port,json=downloadPort,proto3" json:"download_port,omitempty"`
	// Security domain for network.
	SecurityDomain string `protobuf:"bytes,7,opt,name=security_domain,json=securityDomain,proto3" json:"security_domain,omitempty"`
	// Host location(area, country, province, city, etc.).
	Location []string `protobuf:"bytes,8,rep,name=location,proto3" json:"location,omitempty"`
	// IDC where the peer host is located.
	Idc string `protobuf:"bytes,9,opt,name=idc,proto3" json:"idc,omitempty"`
	// Network topology(switch, router, etc.).
	NetTopology []string `protobuf:"bytes,10,rep,name=net_topology,json=netTopology,proto3" json:"net_topology,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *Host) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Host) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *Host) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *Host) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Host) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Host) GetDownloadPort() int32 {
	if x != nil {
		return x.DownloadPort
	}
	return 0
}

func (x *Host) GetSecurityDomain() string {
	if x != nil {
		return x.SecurityDomain
	}
	return ""
}

func (x *Host) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Host) GetIdc() string {
	if x != nil {
		return x.Idc
	}
	return ""
}

func (x *Host) GetNetTopology() []string {
	if x != nil {
		return x.NetTopology
	}
	return nil
}

// RegisteredRequest represents registered request of AnnouncePeerRequest.
type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task id.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Peer id.
	PeerId string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// Task metadata.
	Metadata *v2.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Host info.
	Host *Host `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	// Task type.
	TaskType v2.TaskType `protobuf:"varint,5,opt,name=task_type,json=taskType,proto3,enum=common.TaskType" json:"task_type,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RegisterRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *RegisterRequest) GetMetadata() *v2.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegisterRequest) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *RegisterRequest) GetTaskType() v2.TaskType {
	if x != nil {
		return x.TaskType
	}
	return v2.TaskType(0)
}

// TaskDownloadStartedRequest represents peer download started request of AnnouncePeerRequest.
type PeerDownloadStartedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PeerDownloadStartedRequest) Reset() {
	*x = PeerDownloadStartedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerDownloadStartedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerDownloadStartedRequest) ProtoMessage() {}

func (x *PeerDownloadStartedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerDownloadStartedRequest.ProtoReflect.Descriptor instead.
func (*PeerDownloadStartedRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{4}
}

// PeerDownloadBackToSourceRequest represents peer download back-to-source request of AnnouncePeerRequest.
type PeerDownloadBackToSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Download back-to-source reason.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *PeerDownloadBackToSourceRequest) Reset() {
	*x = PeerDownloadBackToSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerDownloadBackToSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerDownloadBackToSourceRequest) ProtoMessage() {}

func (x *PeerDownloadBackToSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerDownloadBackToSourceRequest.ProtoReflect.Descriptor instead.
func (*PeerDownloadBackToSourceRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{5}
}

func (x *PeerDownloadBackToSourceRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// PeerDownloadFinishedRequest represents peer download finished request of AnnouncePeerRequest.
type PeerDownloadFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total content length.
	ContentLength int64 `protobuf:"varint,1,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	// Total piece count.
	PieceCount int64 `protobuf:"varint,2,opt,name=piece_count,json=pieceCount,proto3" json:"piece_count,omitempty"`
}

func (x *PeerDownloadFinishedRequest) Reset() {
	*x = PeerDownloadFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerDownloadFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerDownloadFinishedRequest) ProtoMessage() {}

func (x *PeerDownloadFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerDownloadFinishedRequest.ProtoReflect.Descriptor instead.
func (*PeerDownloadFinishedRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{6}
}

func (x *PeerDownloadFinishedRequest) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

func (x *PeerDownloadFinishedRequest) GetPieceCount() int64 {
	if x != nil {
		return x.PieceCount
	}
	return 0
}

// PieceDownloadFinishedRequest represents piece download finished request of AnnouncePeerRequest.
type PieceDownloadFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Piece info.
	Piece *v2.Piece `protobuf:"bytes,1,opt,name=piece,proto3" json:"piece,omitempty"`
}

func (x *PieceDownloadFinishedRequest) Reset() {
	*x = PieceDownloadFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PieceDownloadFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PieceDownloadFinishedRequest) ProtoMessage() {}

func (x *PieceDownloadFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PieceDownloadFinishedRequest.ProtoReflect.Descriptor instead.
func (*PieceDownloadFinishedRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{7}
}

func (x *PieceDownloadFinishedRequest) GetPiece() *v2.Piece {
	if x != nil {
		return x.Piece
	}
	return nil
}

// AnnouncePeerRequest represents request of AnnouncePeer.
type AnnouncePeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*AnnouncePeerRequest_RegisterRequest
	//	*AnnouncePeerRequest_PeerDownloadStartedRequest
	//	*AnnouncePeerRequest_PeerDownloadBackToSourceRequest
	//	*AnnouncePeerRequest_PeerDownloadFinishedRequest
	//	*AnnouncePeerRequest_PieceDownloadFinishedRequest
	//	*AnnouncePeerRequest_PeerDownloadBackToSourceFailed
	//	*AnnouncePeerRequest_PieceDownloadFailed
	//	*AnnouncePeerRequest_PieceInfoSyncFailed
	//	*AnnouncePeerRequest_ScheduleFailed
	Request isAnnouncePeerRequest_Request `protobuf_oneof:"request"`
}

func (x *AnnouncePeerRequest) Reset() {
	*x = AnnouncePeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnouncePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnouncePeerRequest) ProtoMessage() {}

func (x *AnnouncePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnouncePeerRequest.ProtoReflect.Descriptor instead.
func (*AnnouncePeerRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{8}
}

func (m *AnnouncePeerRequest) GetRequest() isAnnouncePeerRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *AnnouncePeerRequest) GetRegisterRequest() *RegisterRequest {
	if x, ok := x.GetRequest().(*AnnouncePeerRequest_RegisterRequest); ok {
		return x.RegisterRequest
	}
	return nil
}

func (x *AnnouncePeerRequest) GetPeerDownloadStartedRequest() *PeerDownloadStartedRequest {
	if x, ok := x.GetRequest().(*AnnouncePeerRequest_PeerDownloadStartedRequest); ok {
		return x.PeerDownloadStartedRequest
	}
	return nil
}

func (x *AnnouncePeerRequest) GetPeerDownloadBackToSourceRequest() *PeerDownloadBackToSourceRequest {
	if x, ok := x.GetRequest().(*AnnouncePeerRequest_PeerDownloadBackToSourceRequest); ok {
		return x.PeerDownloadBackToSourceRequest
	}
	return nil
}

func (x *AnnouncePeerRequest) GetPeerDownloadFinishedRequest() *PeerDownloadFinishedRequest {
	if x, ok := x.GetRequest().(*AnnouncePeerRequest_PeerDownloadFinishedRequest); ok {
		return x.PeerDownloadFinishedRequest
	}
	return nil
}

func (x *AnnouncePeerRequest) GetPieceDownloadFinishedRequest() *PieceDownloadFinishedRequest {
	if x, ok := x.GetRequest().(*AnnouncePeerRequest_PieceDownloadFinishedRequest); ok {
		return x.PieceDownloadFinishedRequest
	}
	return nil
}

func (x *AnnouncePeerRequest) GetPeerDownloadBackToSourceFailed() *v21.PeerDownloadBackToSourceFailed {
	if x, ok := x.GetRequest().(*AnnouncePeerRequest_PeerDownloadBackToSourceFailed); ok {
		return x.PeerDownloadBackToSourceFailed
	}
	return nil
}

func (x *AnnouncePeerRequest) GetPieceDownloadFailed() *v21.PieceDownloadFailed {
	if x, ok := x.GetRequest().(*AnnouncePeerRequest_PieceDownloadFailed); ok {
		return x.PieceDownloadFailed
	}
	return nil
}

func (x *AnnouncePeerRequest) GetPieceInfoSyncFailed() *v21.PieceInfoSyncFailed {
	if x, ok := x.GetRequest().(*AnnouncePeerRequest_PieceInfoSyncFailed); ok {
		return x.PieceInfoSyncFailed
	}
	return nil
}

func (x *AnnouncePeerRequest) GetScheduleFailed() *v21.ScheduleFailed {
	if x, ok := x.GetRequest().(*AnnouncePeerRequest_ScheduleFailed); ok {
		return x.ScheduleFailed
	}
	return nil
}

type isAnnouncePeerRequest_Request interface {
	isAnnouncePeerRequest_Request()
}

type AnnouncePeerRequest_RegisterRequest struct {
	RegisterRequest *RegisterRequest `protobuf:"bytes,1,opt,name=register_request,json=registerRequest,proto3,oneof"`
}

type AnnouncePeerRequest_PeerDownloadStartedRequest struct {
	PeerDownloadStartedRequest *PeerDownloadStartedRequest `protobuf:"bytes,2,opt,name=peer_download_started_request,json=peerDownloadStartedRequest,proto3,oneof"`
}

type AnnouncePeerRequest_PeerDownloadBackToSourceRequest struct {
	PeerDownloadBackToSourceRequest *PeerDownloadBackToSourceRequest `protobuf:"bytes,3,opt,name=peer_download_back_to_source_request,json=peerDownloadBackToSourceRequest,proto3,oneof"`
}

type AnnouncePeerRequest_PeerDownloadFinishedRequest struct {
	PeerDownloadFinishedRequest *PeerDownloadFinishedRequest `protobuf:"bytes,4,opt,name=peer_download_finished_request,json=peerDownloadFinishedRequest,proto3,oneof"`
}

type AnnouncePeerRequest_PieceDownloadFinishedRequest struct {
	PieceDownloadFinishedRequest *PieceDownloadFinishedRequest `protobuf:"bytes,5,opt,name=piece_download_finished_request,json=pieceDownloadFinishedRequest,proto3,oneof"`
}

type AnnouncePeerRequest_PeerDownloadBackToSourceFailed struct {
	PeerDownloadBackToSourceFailed *v21.PeerDownloadBackToSourceFailed `protobuf:"bytes,6,opt,name=peer_download_back_to_source_failed,json=peerDownloadBackToSourceFailed,proto3,oneof"`
}

type AnnouncePeerRequest_PieceDownloadFailed struct {
	PieceDownloadFailed *v21.PieceDownloadFailed `protobuf:"bytes,7,opt,name=piece_download_failed,json=pieceDownloadFailed,proto3,oneof"`
}

type AnnouncePeerRequest_PieceInfoSyncFailed struct {
	PieceInfoSyncFailed *v21.PieceInfoSyncFailed `protobuf:"bytes,8,opt,name=piece_info_sync_failed,json=pieceInfoSyncFailed,proto3,oneof"`
}

type AnnouncePeerRequest_ScheduleFailed struct {
	ScheduleFailed *v21.ScheduleFailed `protobuf:"bytes,9,opt,name=schedule_failed,json=scheduleFailed,proto3,oneof"`
}

func (*AnnouncePeerRequest_RegisterRequest) isAnnouncePeerRequest_Request() {}

func (*AnnouncePeerRequest_PeerDownloadStartedRequest) isAnnouncePeerRequest_Request() {}

func (*AnnouncePeerRequest_PeerDownloadBackToSourceRequest) isAnnouncePeerRequest_Request() {}

func (*AnnouncePeerRequest_PeerDownloadFinishedRequest) isAnnouncePeerRequest_Request() {}

func (*AnnouncePeerRequest_PieceDownloadFinishedRequest) isAnnouncePeerRequest_Request() {}

func (*AnnouncePeerRequest_PeerDownloadBackToSourceFailed) isAnnouncePeerRequest_Request() {}

func (*AnnouncePeerRequest_PieceDownloadFailed) isAnnouncePeerRequest_Request() {}

func (*AnnouncePeerRequest_PieceInfoSyncFailed) isAnnouncePeerRequest_Request() {}

func (*AnnouncePeerRequest_ScheduleFailed) isAnnouncePeerRequest_Request() {}

// TinyTaskResponse represents tiny task response of AnnouncePeerResponse.
type TinyTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TinyTaskResponse) Reset() {
	*x = TinyTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TinyTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TinyTaskResponse) ProtoMessage() {}

func (x *TinyTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TinyTaskResponse.ProtoReflect.Descriptor instead.
func (*TinyTaskResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{9}
}

func (x *TinyTaskResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// SmallTaskResponse represents small task response of AnnouncePeerResponse.
type SmallTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Piece info.
	Piece *v2.Piece `protobuf:"bytes,1,opt,name=piece,proto3" json:"piece,omitempty"`
}

func (x *SmallTaskResponse) Reset() {
	*x = SmallTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallTaskResponse) ProtoMessage() {}

func (x *SmallTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallTaskResponse.ProtoReflect.Descriptor instead.
func (*SmallTaskResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{10}
}

func (x *SmallTaskResponse) GetPiece() *v2.Piece {
	if x != nil {
		return x.Piece
	}
	return nil
}

// NormalTaskResponse represents normal task response of AnnouncePeerResponse.
type NormalTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Candidate parents.
	CandidateParents []*Peer `protobuf:"bytes,1,rep,name=candidate_parents,json=candidateParents,proto3" json:"candidate_parents,omitempty"`
	// Concurrent downloading count from main peer.
	ParallelCount int32 `protobuf:"varint,2,opt,name=parallel_count,json=parallelCount,proto3" json:"parallel_count,omitempty"`
}

func (x *NormalTaskResponse) Reset() {
	*x = NormalTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalTaskResponse) ProtoMessage() {}

func (x *NormalTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalTaskResponse.ProtoReflect.Descriptor instead.
func (*NormalTaskResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{11}
}

func (x *NormalTaskResponse) GetCandidateParents() []*Peer {
	if x != nil {
		return x.CandidateParents
	}
	return nil
}

func (x *NormalTaskResponse) GetParallelCount() int32 {
	if x != nil {
		return x.ParallelCount
	}
	return 0
}

// NeedBackToSourceResponse represents need back-to-source response of AnnouncePeerResponse.
type NeedBackToSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Download back-to-source reason.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *NeedBackToSourceResponse) Reset() {
	*x = NeedBackToSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeedBackToSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeedBackToSourceResponse) ProtoMessage() {}

func (x *NeedBackToSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeedBackToSourceResponse.ProtoReflect.Descriptor instead.
func (*NeedBackToSourceResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{12}
}

func (x *NeedBackToSourceResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// AnnouncePeerResponse represents response of AnnouncePeer.
type AnnouncePeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*AnnouncePeerResponse_TinyTaskResponse
	//	*AnnouncePeerResponse_SmallTaskResponse
	//	*AnnouncePeerResponse_NormalTaskResponse
	//	*AnnouncePeerResponse_NeedBackToSourceResponse
	//	*AnnouncePeerResponse_ScheduleFailed
	Response isAnnouncePeerResponse_Response `protobuf_oneof:"response"`
}

func (x *AnnouncePeerResponse) Reset() {
	*x = AnnouncePeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnouncePeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnouncePeerResponse) ProtoMessage() {}

func (x *AnnouncePeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnouncePeerResponse.ProtoReflect.Descriptor instead.
func (*AnnouncePeerResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{13}
}

func (m *AnnouncePeerResponse) GetResponse() isAnnouncePeerResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AnnouncePeerResponse) GetTinyTaskResponse() *TinyTaskResponse {
	if x, ok := x.GetResponse().(*AnnouncePeerResponse_TinyTaskResponse); ok {
		return x.TinyTaskResponse
	}
	return nil
}

func (x *AnnouncePeerResponse) GetSmallTaskResponse() *SmallTaskResponse {
	if x, ok := x.GetResponse().(*AnnouncePeerResponse_SmallTaskResponse); ok {
		return x.SmallTaskResponse
	}
	return nil
}

func (x *AnnouncePeerResponse) GetNormalTaskResponse() *NormalTaskResponse {
	if x, ok := x.GetResponse().(*AnnouncePeerResponse_NormalTaskResponse); ok {
		return x.NormalTaskResponse
	}
	return nil
}

func (x *AnnouncePeerResponse) GetNeedBackToSourceResponse() *NeedBackToSourceResponse {
	if x, ok := x.GetResponse().(*AnnouncePeerResponse_NeedBackToSourceResponse); ok {
		return x.NeedBackToSourceResponse
	}
	return nil
}

func (x *AnnouncePeerResponse) GetScheduleFailed() *v21.ScheduleFailed {
	if x, ok := x.GetResponse().(*AnnouncePeerResponse_ScheduleFailed); ok {
		return x.ScheduleFailed
	}
	return nil
}

type isAnnouncePeerResponse_Response interface {
	isAnnouncePeerResponse_Response()
}

type AnnouncePeerResponse_TinyTaskResponse struct {
	TinyTaskResponse *TinyTaskResponse `protobuf:"bytes,1,opt,name=tiny_task_response,json=tinyTaskResponse,proto3,oneof"`
}

type AnnouncePeerResponse_SmallTaskResponse struct {
	SmallTaskResponse *SmallTaskResponse `protobuf:"bytes,2,opt,name=small_task_response,json=smallTaskResponse,proto3,oneof"`
}

type AnnouncePeerResponse_NormalTaskResponse struct {
	NormalTaskResponse *NormalTaskResponse `protobuf:"bytes,3,opt,name=normal_task_response,json=normalTaskResponse,proto3,oneof"`
}

type AnnouncePeerResponse_NeedBackToSourceResponse struct {
	NeedBackToSourceResponse *NeedBackToSourceResponse `protobuf:"bytes,4,opt,name=need_back_to_source_response,json=needBackToSourceResponse,proto3,oneof"`
}

type AnnouncePeerResponse_ScheduleFailed struct {
	ScheduleFailed *v21.ScheduleFailed `protobuf:"bytes,5,opt,name=scheduleFailed,proto3,oneof"`
}

func (*AnnouncePeerResponse_TinyTaskResponse) isAnnouncePeerResponse_Response() {}

func (*AnnouncePeerResponse_SmallTaskResponse) isAnnouncePeerResponse_Response() {}

func (*AnnouncePeerResponse_NormalTaskResponse) isAnnouncePeerResponse_Response() {}

func (*AnnouncePeerResponse_NeedBackToSourceResponse) isAnnouncePeerResponse_Response() {}

func (*AnnouncePeerResponse_ScheduleFailed) isAnnouncePeerResponse_Response() {}

// StatPeerRequest represents request of StatPeer.
type StatPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task id.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Peer id.
	PeerId string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *StatPeerRequest) Reset() {
	*x = StatPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatPeerRequest) ProtoMessage() {}

func (x *StatPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatPeerRequest.ProtoReflect.Descriptor instead.
func (*StatPeerRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{14}
}

func (x *StatPeerRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *StatPeerRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

// TODO exchange peer request definition.
// ExchangePeerRequest represents request of ExchangePeer.
type ExchangePeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task id.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Peer id.
	PeerId string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *ExchangePeerRequest) Reset() {
	*x = ExchangePeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangePeerRequest) ProtoMessage() {}

func (x *ExchangePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangePeerRequest.ProtoReflect.Descriptor instead.
func (*ExchangePeerRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{15}
}

func (x *ExchangePeerRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExchangePeerRequest) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

// TODO exchange peer response definition.
// ExchangePeerResponse represents response of ExchangePeer.
type ExchangePeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExchangePeerResponse) Reset() {
	*x = ExchangePeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangePeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangePeerResponse) ProtoMessage() {}

func (x *ExchangePeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangePeerResponse.ProtoReflect.Descriptor instead.
func (*ExchangePeerResponse) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{16}
}

// LeavePeerRequest represents request of LeavePeer.
type LeavePeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LeavePeerRequest) Reset() {
	*x = LeavePeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeavePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeavePeerRequest) ProtoMessage() {}

func (x *LeavePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeavePeerRequest.ProtoReflect.Descriptor instead.
func (*LeavePeerRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{17}
}

func (x *LeavePeerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// StatTaskRequest represents request of StatTask.
type StatTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StatTaskRequest) Reset() {
	*x = StatTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatTaskRequest) ProtoMessage() {}

func (x *StatTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatTaskRequest.ProtoReflect.Descriptor instead.
func (*StatTaskRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{18}
}

func (x *StatTaskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// AnnounceHostRequest represents request of AnnounceHost.
type AnnounceHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Host type.
	Type uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	// Hostname.
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Host ip.
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	// Port of grpc service.
	Port int32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Port of download server.
	DownloadPort int32 `protobuf:"varint,6,opt,name=download_port,json=downloadPort,proto3" json:"download_port,omitempty"`
	// Host OS.
	Os string `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`
	// Host platform.
	Platform string `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	// Host platform family.
	PlatformFamily string `protobuf:"bytes,9,opt,name=platform_family,json=platformFamily,proto3" json:"platform_family,omitempty"`
	// Host platform version.
	PlatformVersion string `protobuf:"bytes,10,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty"`
	// Host kernel version.
	KernelVersion string `protobuf:"bytes,11,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	// CPU Stat.
	Cpu *CPU `protobuf:"bytes,12,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Memory Stat.
	Memory *Memory `protobuf:"bytes,13,opt,name=memory,proto3" json:"memory,omitempty"`
	// Network Stat.
	Network *Network `protobuf:"bytes,14,opt,name=network,proto3" json:"network,omitempty"`
	// Disk Stat.
	Disk *Disk `protobuf:"bytes,15,opt,name=disk,proto3" json:"disk,omitempty"`
	// Build information.
	Build *Build `protobuf:"bytes,16,opt,name=build,proto3" json:"build,omitempty"`
}

func (x *AnnounceHostRequest) Reset() {
	*x = AnnounceHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnounceHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceHostRequest) ProtoMessage() {}

func (x *AnnounceHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceHostRequest.ProtoReflect.Descriptor instead.
func (*AnnounceHostRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{19}
}

func (x *AnnounceHostRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnnounceHostRequest) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AnnounceHostRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *AnnounceHostRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AnnounceHostRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AnnounceHostRequest) GetDownloadPort() int32 {
	if x != nil {
		return x.DownloadPort
	}
	return 0
}

func (x *AnnounceHostRequest) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *AnnounceHostRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *AnnounceHostRequest) GetPlatformFamily() string {
	if x != nil {
		return x.PlatformFamily
	}
	return ""
}

func (x *AnnounceHostRequest) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *AnnounceHostRequest) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *AnnounceHostRequest) GetCpu() *CPU {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *AnnounceHostRequest) GetMemory() *Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *AnnounceHostRequest) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *AnnounceHostRequest) GetDisk() *Disk {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *AnnounceHostRequest) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

// CPU Stat.
type CPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of logical cores in the system.
	LogicalCount uint32 `protobuf:"varint,1,opt,name=logical_count,json=logicalCount,proto3" json:"logical_count,omitempty"`
	// Number of physical cores in the system
	PhysicalCount uint32 `protobuf:"varint,2,opt,name=physical_count,json=physicalCount,proto3" json:"physical_count,omitempty"`
	// Percent calculates the percentage of cpu used.
	Percent float64 `protobuf:"fixed64,3,opt,name=percent,proto3" json:"percent,omitempty"`
	// Calculates the percentage of cpu used by process.
	ProcessPercent float64 `protobuf:"fixed64,4,opt,name=process_percent,json=processPercent,proto3" json:"process_percent,omitempty"`
	// CPUTimes contains the amounts of time the CPU has spent performing different kinds of work.
	Times *CPUTimes `protobuf:"bytes,5,opt,name=times,proto3" json:"times,omitempty"`
}

func (x *CPU) Reset() {
	*x = CPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPU) ProtoMessage() {}

func (x *CPU) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPU.ProtoReflect.Descriptor instead.
func (*CPU) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{20}
}

func (x *CPU) GetLogicalCount() uint32 {
	if x != nil {
		return x.LogicalCount
	}
	return 0
}

func (x *CPU) GetPhysicalCount() uint32 {
	if x != nil {
		return x.PhysicalCount
	}
	return 0
}

func (x *CPU) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *CPU) GetProcessPercent() float64 {
	if x != nil {
		return x.ProcessPercent
	}
	return 0
}

func (x *CPU) GetTimes() *CPUTimes {
	if x != nil {
		return x.Times
	}
	return nil
}

// CPUTimes contains the amounts of time the CPU has spent performing different
// kinds of work. Time units are in seconds.
type CPUTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU time of user.
	User float64 `protobuf:"fixed64,1,opt,name=user,proto3" json:"user,omitempty"`
	// CPU time of system.
	System float64 `protobuf:"fixed64,2,opt,name=system,proto3" json:"system,omitempty"`
	// CPU time of idle.
	Idle float64 `protobuf:"fixed64,3,opt,name=idle,proto3" json:"idle,omitempty"`
	// CPU time of nice.
	Nice float64 `protobuf:"fixed64,4,opt,name=nice,proto3" json:"nice,omitempty"`
	// CPU time of iowait.
	Iowait float64 `protobuf:"fixed64,5,opt,name=iowait,proto3" json:"iowait,omitempty"`
	// CPU time of irq.
	Irq float64 `protobuf:"fixed64,6,opt,name=irq,proto3" json:"irq,omitempty"`
	// CPU time of softirq.
	Softirq float64 `protobuf:"fixed64,7,opt,name=softirq,proto3" json:"softirq,omitempty"`
	// CPU time of steal.
	Steal float64 `protobuf:"fixed64,8,opt,name=steal,proto3" json:"steal,omitempty"`
	// CPU time of guest.
	Guest float64 `protobuf:"fixed64,9,opt,name=guest,proto3" json:"guest,omitempty"`
	// CPU time of guest nice.
	GuestNice float64 `protobuf:"fixed64,10,opt,name=guest_nice,json=guestNice,proto3" json:"guest_nice,omitempty"`
}

func (x *CPUTimes) Reset() {
	*x = CPUTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUTimes) ProtoMessage() {}

func (x *CPUTimes) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUTimes.ProtoReflect.Descriptor instead.
func (*CPUTimes) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{21}
}

func (x *CPUTimes) GetUser() float64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *CPUTimes) GetSystem() float64 {
	if x != nil {
		return x.System
	}
	return 0
}

func (x *CPUTimes) GetIdle() float64 {
	if x != nil {
		return x.Idle
	}
	return 0
}

func (x *CPUTimes) GetNice() float64 {
	if x != nil {
		return x.Nice
	}
	return 0
}

func (x *CPUTimes) GetIowait() float64 {
	if x != nil {
		return x.Iowait
	}
	return 0
}

func (x *CPUTimes) GetIrq() float64 {
	if x != nil {
		return x.Irq
	}
	return 0
}

func (x *CPUTimes) GetSoftirq() float64 {
	if x != nil {
		return x.Softirq
	}
	return 0
}

func (x *CPUTimes) GetSteal() float64 {
	if x != nil {
		return x.Steal
	}
	return 0
}

func (x *CPUTimes) GetGuest() float64 {
	if x != nil {
		return x.Guest
	}
	return 0
}

func (x *CPUTimes) GetGuestNice() float64 {
	if x != nil {
		return x.GuestNice
	}
	return 0
}

// Memory Stat.
type Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total amount of RAM on this system.
	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// RAM available for programs to allocate.
	Available uint64 `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	// RAM used by programs.
	Used uint64 `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	// Percentage of RAM used by programs.
	UsedPercent float64 `protobuf:"fixed64,4,opt,name=used_percent,json=usedPercent,proto3" json:"used_percent,omitempty"`
	// Calculates the percentage of memory used by process.
	ProcessUsedPercent float64 `protobuf:"fixed64,5,opt,name=process_used_percent,json=processUsedPercent,proto3" json:"process_used_percent,omitempty"`
	// This is the kernel's notion of free memory.
	Free uint64 `protobuf:"varint,6,opt,name=free,proto3" json:"free,omitempty"`
}

func (x *Memory) Reset() {
	*x = Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Memory) ProtoMessage() {}

func (x *Memory) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Memory.ProtoReflect.Descriptor instead.
func (*Memory) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{22}
}

func (x *Memory) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Memory) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *Memory) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Memory) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *Memory) GetProcessUsedPercent() float64 {
	if x != nil {
		return x.ProcessUsedPercent
	}
	return 0
}

func (x *Memory) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

// Network Stat.
type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return count of tcp connections opened and status is ESTABLISHED.
	TcpConnectionCount uint32 `protobuf:"varint,1,opt,name=tcp_connection_count,json=tcpConnectionCount,proto3" json:"tcp_connection_count,omitempty"`
	// Return count of upload tcp connections opened and status is ESTABLISHED.
	UploadTcpConnectionCount uint32 `protobuf:"varint,2,opt,name=upload_tcp_connection_count,json=uploadTcpConnectionCount,proto3" json:"upload_tcp_connection_count,omitempty"`
	// Security domain for network.
	SecurityDomain string `protobuf:"bytes,3,opt,name=security_domain,json=securityDomain,proto3" json:"security_domain,omitempty"`
	// Location path(area|country|province|city|...).
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// IDC where the peer host is located
	Idc string `protobuf:"bytes,5,opt,name=idc,proto3" json:"idc,omitempty"`
	// Network topology(switch|router|...).
	NetTopology string `protobuf:"bytes,6,opt,name=net_topology,json=netTopology,proto3" json:"net_topology,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{23}
}

func (x *Network) GetTcpConnectionCount() uint32 {
	if x != nil {
		return x.TcpConnectionCount
	}
	return 0
}

func (x *Network) GetUploadTcpConnectionCount() uint32 {
	if x != nil {
		return x.UploadTcpConnectionCount
	}
	return 0
}

func (x *Network) GetSecurityDomain() string {
	if x != nil {
		return x.SecurityDomain
	}
	return ""
}

func (x *Network) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Network) GetIdc() string {
	if x != nil {
		return x.Idc
	}
	return ""
}

func (x *Network) GetNetTopology() string {
	if x != nil {
		return x.NetTopology
	}
	return ""
}

// Disk Stat.
type Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total amount of disk on the data path of dragonfly.
	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Free amount of disk on the data path of dragonfly.
	Free uint64 `protobuf:"varint,2,opt,name=free,proto3" json:"free,omitempty"`
	// Used amount of disk on the data path of dragonfly.
	Used uint64 `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	// Used percent of disk on the data path of dragonfly directory.
	UsedPercent float64 `protobuf:"fixed64,4,opt,name=used_percent,json=usedPercent,proto3" json:"used_percent,omitempty"`
	// Total amount of indoes on the data path of dragonfly directory.
	InodesTotal uint64 `protobuf:"varint,5,opt,name=inodes_total,json=inodesTotal,proto3" json:"inodes_total,omitempty"`
	// Used amount of indoes on the data path of dragonfly directory.
	InodesUsed uint64 `protobuf:"varint,6,opt,name=inodes_used,json=inodesUsed,proto3" json:"inodes_used,omitempty"`
	// Free amount of indoes on the data path of dragonfly directory.
	InodesFree uint64 `protobuf:"varint,7,opt,name=inodes_free,json=inodesFree,proto3" json:"inodes_free,omitempty"`
	// Used percent of indoes on the data path of dragonfly directory.
	InodesUsedPercent float64 `protobuf:"fixed64,8,opt,name=inodes_used_percent,json=inodesUsedPercent,proto3" json:"inodes_used_percent,omitempty"`
}

func (x *Disk) Reset() {
	*x = Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{24}
}

func (x *Disk) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Disk) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *Disk) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *Disk) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *Disk) GetInodesTotal() uint64 {
	if x != nil {
		return x.InodesTotal
	}
	return 0
}

func (x *Disk) GetInodesUsed() uint64 {
	if x != nil {
		return x.InodesUsed
	}
	return 0
}

func (x *Disk) GetInodesFree() uint64 {
	if x != nil {
		return x.InodesFree
	}
	return 0
}

func (x *Disk) GetInodesUsedPercent() float64 {
	if x != nil {
		return x.InodesUsedPercent
	}
	return 0
}

// Build information.
type Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Git version.
	GitVersion string `protobuf:"bytes,1,opt,name=git_version,json=gitVersion,proto3" json:"git_version,omitempty"`
	// Git commit.
	GitCommit string `protobuf:"bytes,2,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	// Golang version.
	GoVersion string `protobuf:"bytes,3,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	// Build platform.
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *Build) Reset() {
	*x = Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{25}
}

func (x *Build) GetGitVersion() string {
	if x != nil {
		return x.GitVersion
	}
	return ""
}

func (x *Build) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *Build) GetGoVersion() string {
	if x != nil {
		return x.GoVersion
	}
	return ""
}

func (x *Build) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

// LeaveHostRequest represents request of LeaveHost.
type LeaveHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LeaveHostRequest) Reset() {
	*x = LeaveHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveHostRequest) ProtoMessage() {}

func (x *LeaveHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveHostRequest.ProtoReflect.Descriptor instead.
func (*LeaveHostRequest) Descriptor() ([]byte, []int) {
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP(), []int{26}
}

func (x *LeaveHostRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_pkg_apis_scheduler_v2_scheduler_proto protoreflect.FileDescriptor

var file_pkg_apis_scheduler_v2_scheduler_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x1a, 0x1f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x02, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x69, 0x65,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x65, 0x63, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x43,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x87, 0x04, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x69, 0x65, 0x63, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2e, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x01,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x84, 0x03,
	0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x78, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12,
	0x1f, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa,
	0x42, 0x08, 0x72, 0x06, 0x80, 0x01, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36,
	0x12, 0x23, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x68, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x10, 0xff, 0xff, 0x03, 0x28, 0x80,
	0x08, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c,
	0xfa, 0x42, 0x09, 0x1a, 0x07, 0x10, 0xff, 0xff, 0x03, 0x28, 0x80, 0x08, 0x52, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0xd0, 0x01, 0x01, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x03, 0x69, 0x64, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0xd0, 0x01, 0x01,
	0x52, 0x03, 0x69, 0x64, 0x63, 0x12, 0x2d, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x92, 0x01, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x50, 0x65, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x42, 0x0a, 0x1f, 0x50, 0x65, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x1b, 0x50, 0x65, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x28, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0b, 0x70, 0x69, 0x65, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28,
	0x00, 0x52, 0x0a, 0x70, 0x69, 0x65, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a,
	0x1c, 0x50, 0x69, 0x65, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x05, 0x70, 0x69, 0x65, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x69, 0x65, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x70, 0x69, 0x65, 0x63, 0x65, 0x22, 0xb1, 0x07, 0x0a,
	0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a,
	0x1d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x70,
	0x65, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x24, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x70, 0x65, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x1e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x65, 0x65, 0x72, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x65, 0x63, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x69, 0x65, 0x63, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x23, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x1e, 0x70, 0x65, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x15, 0x70, 0x69, 0x65, 0x63, 0x65, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x50, 0x69, 0x65, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x70, 0x69, 0x65, 0x63, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x58, 0x0a,
	0x16, 0x70, 0x69, 0x65, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x69, 0x65,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x13, 0x70, 0x69, 0x65, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e,
	0x63, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x42, 0x0e, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0x2f, 0x0a, 0x10, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x7a, 0x02, 0x10, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x42, 0x0a, 0x11, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x69, 0x65, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x69, 0x65, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x70, 0x69, 0x65, 0x63, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x11,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x18, 0x4e, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xc6, 0x03, 0x0a, 0x14, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x74, 0x69,
	0x6e, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x54, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x74, 0x69, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x6e, 0x65,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x65,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x54, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x55, 0x0a, 0x0f, 0x53, 0x74,
	0x61, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x59, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x2a, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xac, 0x05,
	0x0a, 0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x2a, 0x02, 0x18, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x70, 0x01, 0x52, 0x02, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x10, 0xff,
	0xff, 0x03, 0x28, 0x80, 0x08, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x10, 0xff, 0xff, 0x03, 0x28, 0x80, 0x08,
	0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17,
	0x0a, 0x02, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x0f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x32,
	0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x50, 0x55, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x33,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2d, 0x0a, 0x04, 0x64,
	0x69, 0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x22, 0xfb, 0x01, 0x0a,
	0x03, 0x43, 0x50, 0x55, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59,
	0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x29, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x08, 0x43,
	0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b,
	0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x69,
	0x6f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b,
	0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x06, 0x69, 0x6f, 0x77,
	0x61, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x69, 0x72, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x52, 0x03, 0x69, 0x72, 0x71, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x12,
	0x24, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e,
	0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x65, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x05, 0x67, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x52, 0x05, 0x67, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52,
	0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x06, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x59, 0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x12, 0x12, 0x19, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x63, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x22,
	0xae, 0x02, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x29, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x59, 0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x11, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x22, 0xa6, 0x01, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x67, 0x69,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0a,
	0x67, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x67, 0x6f, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x2b, 0x0a, 0x10, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x32, 0xef, 0x03, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x1a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x46,
	0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x22, 0x5a, 0x20, 0x64, 0x37, 0x79, 0x2e,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_apis_scheduler_v2_scheduler_proto_rawDescOnce sync.Once
	file_pkg_apis_scheduler_v2_scheduler_proto_rawDescData = file_pkg_apis_scheduler_v2_scheduler_proto_rawDesc
)

func file_pkg_apis_scheduler_v2_scheduler_proto_rawDescGZIP() []byte {
	file_pkg_apis_scheduler_v2_scheduler_proto_rawDescOnce.Do(func() {
		file_pkg_apis_scheduler_v2_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_apis_scheduler_v2_scheduler_proto_rawDescData)
	})
	return file_pkg_apis_scheduler_v2_scheduler_proto_rawDescData
}

var file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_pkg_apis_scheduler_v2_scheduler_proto_goTypes = []interface{}{
	(*Peer)(nil),                               // 0: scheduler.Peer
	(*Task)(nil),                               // 1: scheduler.Task
	(*Host)(nil),                               // 2: scheduler.Host
	(*RegisterRequest)(nil),                    // 3: scheduler.RegisterRequest
	(*PeerDownloadStartedRequest)(nil),         // 4: scheduler.PeerDownloadStartedRequest
	(*PeerDownloadBackToSourceRequest)(nil),    // 5: scheduler.PeerDownloadBackToSourceRequest
	(*PeerDownloadFinishedRequest)(nil),        // 6: scheduler.PeerDownloadFinishedRequest
	(*PieceDownloadFinishedRequest)(nil),       // 7: scheduler.PieceDownloadFinishedRequest
	(*AnnouncePeerRequest)(nil),                // 8: scheduler.AnnouncePeerRequest
	(*TinyTaskResponse)(nil),                   // 9: scheduler.TinyTaskResponse
	(*SmallTaskResponse)(nil),                  // 10: scheduler.SmallTaskResponse
	(*NormalTaskResponse)(nil),                 // 11: scheduler.NormalTaskResponse
	(*NeedBackToSourceResponse)(nil),           // 12: scheduler.NeedBackToSourceResponse
	(*AnnouncePeerResponse)(nil),               // 13: scheduler.AnnouncePeerResponse
	(*StatPeerRequest)(nil),                    // 14: scheduler.StatPeerRequest
	(*ExchangePeerRequest)(nil),                // 15: scheduler.ExchangePeerRequest
	(*ExchangePeerResponse)(nil),               // 16: scheduler.ExchangePeerResponse
	(*LeavePeerRequest)(nil),                   // 17: scheduler.LeavePeerRequest
	(*StatTaskRequest)(nil),                    // 18: scheduler.StatTaskRequest
	(*AnnounceHostRequest)(nil),                // 19: scheduler.AnnounceHostRequest
	(*CPU)(nil),                                // 20: scheduler.CPU
	(*CPUTimes)(nil),                           // 21: scheduler.CPUTimes
	(*Memory)(nil),                             // 22: scheduler.Memory
	(*Network)(nil),                            // 23: scheduler.Network
	(*Disk)(nil),                               // 24: scheduler.Disk
	(*Build)(nil),                              // 25: scheduler.Build
	(*LeaveHostRequest)(nil),                   // 26: scheduler.LeaveHostRequest
	(*v2.Piece)(nil),                           // 27: common.Piece
	(*timestamppb.Timestamp)(nil),              // 28: google.protobuf.Timestamp
	(v2.SizeScope)(0),                          // 29: common.SizeScope
	(*v2.Metadata)(nil),                        // 30: common.Metadata
	(v2.TaskType)(0),                           // 31: common.TaskType
	(*v21.PeerDownloadBackToSourceFailed)(nil), // 32: errordetails.PeerDownloadBackToSourceFailed
	(*v21.PieceDownloadFailed)(nil),            // 33: errordetails.PieceDownloadFailed
	(*v21.PieceInfoSyncFailed)(nil),            // 34: errordetails.PieceInfoSyncFailed
	(*v21.ScheduleFailed)(nil),                 // 35: errordetails.ScheduleFailed
	(*emptypb.Empty)(nil),                      // 36: google.protobuf.Empty
}
var file_pkg_apis_scheduler_v2_scheduler_proto_depIdxs = []int32{
	27, // 0: scheduler.Peer.pieces:type_name -> common.Piece
	1,  // 1: scheduler.Peer.task:type_name -> scheduler.Task
	2,  // 2: scheduler.Peer.host:type_name -> scheduler.Host
	28, // 3: scheduler.Peer.created_at:type_name -> google.protobuf.Timestamp
	28, // 4: scheduler.Peer.updated_at:type_name -> google.protobuf.Timestamp
	29, // 5: scheduler.Task.size_scope:type_name -> common.SizeScope
	27, // 6: scheduler.Task.pieces:type_name -> common.Piece
	30, // 7: scheduler.Task.metadata:type_name -> common.Metadata
	28, // 8: scheduler.Task.created_at:type_name -> google.protobuf.Timestamp
	28, // 9: scheduler.Task.updated_at:type_name -> google.protobuf.Timestamp
	30, // 10: scheduler.RegisterRequest.metadata:type_name -> common.Metadata
	2,  // 11: scheduler.RegisterRequest.host:type_name -> scheduler.Host
	31, // 12: scheduler.RegisterRequest.task_type:type_name -> common.TaskType
	27, // 13: scheduler.PieceDownloadFinishedRequest.piece:type_name -> common.Piece
	3,  // 14: scheduler.AnnouncePeerRequest.register_request:type_name -> scheduler.RegisterRequest
	4,  // 15: scheduler.AnnouncePeerRequest.peer_download_started_request:type_name -> scheduler.PeerDownloadStartedRequest
	5,  // 16: scheduler.AnnouncePeerRequest.peer_download_back_to_source_request:type_name -> scheduler.PeerDownloadBackToSourceRequest
	6,  // 17: scheduler.AnnouncePeerRequest.peer_download_finished_request:type_name -> scheduler.PeerDownloadFinishedRequest
	7,  // 18: scheduler.AnnouncePeerRequest.piece_download_finished_request:type_name -> scheduler.PieceDownloadFinishedRequest
	32, // 19: scheduler.AnnouncePeerRequest.peer_download_back_to_source_failed:type_name -> errordetails.PeerDownloadBackToSourceFailed
	33, // 20: scheduler.AnnouncePeerRequest.piece_download_failed:type_name -> errordetails.PieceDownloadFailed
	34, // 21: scheduler.AnnouncePeerRequest.piece_info_sync_failed:type_name -> errordetails.PieceInfoSyncFailed
	35, // 22: scheduler.AnnouncePeerRequest.schedule_failed:type_name -> errordetails.ScheduleFailed
	27, // 23: scheduler.SmallTaskResponse.piece:type_name -> common.Piece
	0,  // 24: scheduler.NormalTaskResponse.candidate_parents:type_name -> scheduler.Peer
	9,  // 25: scheduler.AnnouncePeerResponse.tiny_task_response:type_name -> scheduler.TinyTaskResponse
	10, // 26: scheduler.AnnouncePeerResponse.small_task_response:type_name -> scheduler.SmallTaskResponse
	11, // 27: scheduler.AnnouncePeerResponse.normal_task_response:type_name -> scheduler.NormalTaskResponse
	12, // 28: scheduler.AnnouncePeerResponse.need_back_to_source_response:type_name -> scheduler.NeedBackToSourceResponse
	35, // 29: scheduler.AnnouncePeerResponse.scheduleFailed:type_name -> errordetails.ScheduleFailed
	20, // 30: scheduler.AnnounceHostRequest.cpu:type_name -> scheduler.CPU
	22, // 31: scheduler.AnnounceHostRequest.memory:type_name -> scheduler.Memory
	23, // 32: scheduler.AnnounceHostRequest.network:type_name -> scheduler.Network
	24, // 33: scheduler.AnnounceHostRequest.disk:type_name -> scheduler.Disk
	25, // 34: scheduler.AnnounceHostRequest.build:type_name -> scheduler.Build
	21, // 35: scheduler.CPU.times:type_name -> scheduler.CPUTimes
	8,  // 36: scheduler.Scheduler.AnnouncePeer:input_type -> scheduler.AnnouncePeerRequest
	14, // 37: scheduler.Scheduler.StatPeer:input_type -> scheduler.StatPeerRequest
	17, // 38: scheduler.Scheduler.LeavePeer:input_type -> scheduler.LeavePeerRequest
	15, // 39: scheduler.Scheduler.ExchangePeer:input_type -> scheduler.ExchangePeerRequest
	18, // 40: scheduler.Scheduler.StatTask:input_type -> scheduler.StatTaskRequest
	19, // 41: scheduler.Scheduler.AnnounceHost:input_type -> scheduler.AnnounceHostRequest
	26, // 42: scheduler.Scheduler.LeaveHost:input_type -> scheduler.LeaveHostRequest
	13, // 43: scheduler.Scheduler.AnnouncePeer:output_type -> scheduler.AnnouncePeerResponse
	0,  // 44: scheduler.Scheduler.StatPeer:output_type -> scheduler.Peer
	36, // 45: scheduler.Scheduler.LeavePeer:output_type -> google.protobuf.Empty
	16, // 46: scheduler.Scheduler.ExchangePeer:output_type -> scheduler.ExchangePeerResponse
	1,  // 47: scheduler.Scheduler.StatTask:output_type -> scheduler.Task
	36, // 48: scheduler.Scheduler.AnnounceHost:output_type -> google.protobuf.Empty
	36, // 49: scheduler.Scheduler.LeaveHost:output_type -> google.protobuf.Empty
	43, // [43:50] is the sub-list for method output_type
	36, // [36:43] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_pkg_apis_scheduler_v2_scheduler_proto_init() }
func file_pkg_apis_scheduler_v2_scheduler_proto_init() {
	if File_pkg_apis_scheduler_v2_scheduler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerDownloadStartedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerDownloadBackToSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerDownloadFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PieceDownloadFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnouncePeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TinyTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeedBackToSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnouncePeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangePeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangePeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeavePeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnounceHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*AnnouncePeerRequest_RegisterRequest)(nil),
		(*AnnouncePeerRequest_PeerDownloadStartedRequest)(nil),
		(*AnnouncePeerRequest_PeerDownloadBackToSourceRequest)(nil),
		(*AnnouncePeerRequest_PeerDownloadFinishedRequest)(nil),
		(*AnnouncePeerRequest_PieceDownloadFinishedRequest)(nil),
		(*AnnouncePeerRequest_PeerDownloadBackToSourceFailed)(nil),
		(*AnnouncePeerRequest_PieceDownloadFailed)(nil),
		(*AnnouncePeerRequest_PieceInfoSyncFailed)(nil),
		(*AnnouncePeerRequest_ScheduleFailed)(nil),
	}
	file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*AnnouncePeerResponse_TinyTaskResponse)(nil),
		(*AnnouncePeerResponse_SmallTaskResponse)(nil),
		(*AnnouncePeerResponse_NormalTaskResponse)(nil),
		(*AnnouncePeerResponse_NeedBackToSourceResponse)(nil),
		(*AnnouncePeerResponse_ScheduleFailed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_apis_scheduler_v2_scheduler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_apis_scheduler_v2_scheduler_proto_goTypes,
		DependencyIndexes: file_pkg_apis_scheduler_v2_scheduler_proto_depIdxs,
		MessageInfos:      file_pkg_apis_scheduler_v2_scheduler_proto_msgTypes,
	}.Build()
	File_pkg_apis_scheduler_v2_scheduler_proto = out.File
	file_pkg_apis_scheduler_v2_scheduler_proto_rawDesc = nil
	file_pkg_apis_scheduler_v2_scheduler_proto_goTypes = nil
	file_pkg_apis_scheduler_v2_scheduler_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	// AnnouncePeer announces peer to scheduler.
	AnnouncePeer(ctx context.Context, opts ...grpc.CallOption) (Scheduler_AnnouncePeerClient, error)
	// Checks information of peer.
	StatPeer(ctx context.Context, in *StatPeerRequest, opts ...grpc.CallOption) (*Peer, error)
	// LeavePeer releases peer in scheduler.
	LeavePeer(ctx context.Context, in *LeavePeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// TODO exchange peer api definition.
	// ExchangePeer exchanges peer information.
	ExchangePeer(ctx context.Context, in *ExchangePeerRequest, opts ...grpc.CallOption) (*ExchangePeerResponse, error)
	// Checks information of task.
	StatTask(ctx context.Context, in *StatTaskRequest, opts ...grpc.CallOption) (*Task, error)
	// AnnounceHost announces host to scheduler.
	AnnounceHost(ctx context.Context, in *AnnounceHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// LeaveHost releases host in scheduler.
	LeaveHost(ctx context.Context, in *LeaveHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) AnnouncePeer(ctx context.Context, opts ...grpc.CallOption) (Scheduler_AnnouncePeerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scheduler_serviceDesc.Streams[0], "/scheduler.Scheduler/AnnouncePeer", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerAnnouncePeerClient{stream}
	return x, nil
}

type Scheduler_AnnouncePeerClient interface {
	Send(*AnnouncePeerRequest) error
	Recv() (*AnnouncePeerResponse, error)
	grpc.ClientStream
}

type schedulerAnnouncePeerClient struct {
	grpc.ClientStream
}

func (x *schedulerAnnouncePeerClient) Send(m *AnnouncePeerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerAnnouncePeerClient) Recv() (*AnnouncePeerResponse, error) {
	m := new(AnnouncePeerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) StatPeer(ctx context.Context, in *StatPeerRequest, opts ...grpc.CallOption) (*Peer, error) {
	out := new(Peer)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/StatPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) LeavePeer(ctx context.Context, in *LeavePeerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/LeavePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ExchangePeer(ctx context.Context, in *ExchangePeerRequest, opts ...grpc.CallOption) (*ExchangePeerResponse, error) {
	out := new(ExchangePeerResponse)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/ExchangePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) StatTask(ctx context.Context, in *StatTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/StatTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) AnnounceHost(ctx context.Context, in *AnnounceHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/AnnounceHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) LeaveHost(ctx context.Context, in *LeaveHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scheduler.Scheduler/LeaveHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	// AnnouncePeer announces peer to scheduler.
	AnnouncePeer(Scheduler_AnnouncePeerServer) error
	// Checks information of peer.
	StatPeer(context.Context, *StatPeerRequest) (*Peer, error)
	// LeavePeer releases peer in scheduler.
	LeavePeer(context.Context, *LeavePeerRequest) (*emptypb.Empty, error)
	// TODO exchange peer api definition.
	// ExchangePeer exchanges peer information.
	ExchangePeer(context.Context, *ExchangePeerRequest) (*ExchangePeerResponse, error)
	// Checks information of task.
	StatTask(context.Context, *StatTaskRequest) (*Task, error)
	// AnnounceHost announces host to scheduler.
	AnnounceHost(context.Context, *AnnounceHostRequest) (*emptypb.Empty, error)
	// LeaveHost releases host in scheduler.
	LeaveHost(context.Context, *LeaveHostRequest) (*emptypb.Empty, error)
}

// UnimplementedSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (*UnimplementedSchedulerServer) AnnouncePeer(Scheduler_AnnouncePeerServer) error {
	return status.Errorf(codes.Unimplemented, "method AnnouncePeer not implemented")
}
func (*UnimplementedSchedulerServer) StatPeer(context.Context, *StatPeerRequest) (*Peer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatPeer not implemented")
}
func (*UnimplementedSchedulerServer) LeavePeer(context.Context, *LeavePeerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeavePeer not implemented")
}
func (*UnimplementedSchedulerServer) ExchangePeer(context.Context, *ExchangePeerRequest) (*ExchangePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangePeer not implemented")
}
func (*UnimplementedSchedulerServer) StatTask(context.Context, *StatTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatTask not implemented")
}
func (*UnimplementedSchedulerServer) AnnounceHost(context.Context, *AnnounceHostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceHost not implemented")
}
func (*UnimplementedSchedulerServer) LeaveHost(context.Context, *LeaveHostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveHost not implemented")
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_AnnouncePeer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServer).AnnouncePeer(&schedulerAnnouncePeerServer{stream})
}

type Scheduler_AnnouncePeerServer interface {
	Send(*AnnouncePeerResponse) error
	Recv() (*AnnouncePeerRequest, error)
	grpc.ServerStream
}

type schedulerAnnouncePeerServer struct {
	grpc.ServerStream
}

func (x *schedulerAnnouncePeerServer) Send(m *AnnouncePeerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerAnnouncePeerServer) Recv() (*AnnouncePeerRequest, error) {
	m := new(AnnouncePeerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Scheduler_StatPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).StatPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/StatPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).StatPeer(ctx, req.(*StatPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_LeavePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeavePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).LeavePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/LeavePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).LeavePeer(ctx, req.(*LeavePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ExchangePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ExchangePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/ExchangePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ExchangePeer(ctx, req.(*ExchangePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_StatTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).StatTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/StatTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).StatTask(ctx, req.(*StatTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_AnnounceHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).AnnounceHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/AnnounceHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).AnnounceHost(ctx, req.(*AnnounceHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_LeaveHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).LeaveHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/LeaveHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).LeaveHost(ctx, req.(*LeaveHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StatPeer",
			Handler:    _Scheduler_StatPeer_Handler,
		},
		{
			MethodName: "LeavePeer",
			Handler:    _Scheduler_LeavePeer_Handler,
		},
		{
			MethodName: "ExchangePeer",
			Handler:    _Scheduler_ExchangePeer_Handler,
		},
		{
			MethodName: "StatTask",
			Handler:    _Scheduler_StatTask_Handler,
		},
		{
			MethodName: "AnnounceHost",
			Handler:    _Scheduler_AnnounceHost_Handler,
		},
		{
			MethodName: "LeaveHost",
			Handler:    _Scheduler_LeaveHost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AnnouncePeer",
			Handler:       _Scheduler_AnnouncePeer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/apis/scheduler/v2/scheduler.proto",
}
