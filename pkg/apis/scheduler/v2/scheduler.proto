/*
 *     Copyright 2022 The Dragonfly Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package scheduler;

import "pkg/apis/common/v2/common.proto";
import "pkg/apis/errordetails/v2/errordetails.proto";
import "validate/validate.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "d7y.io/api/pkg/apis/scheduler/v2";

// Peer metadata.
message Peer{
  // Peer id.
  string id = 1 [(validate.rules).string.min_len = 1];
  // Pieces of peer.
  repeated common.Piece pieces = 2 [(validate.rules).repeated = {min_items: 1, ignore_empty: true}];
  // Task info.
  Task task = 3 [(validate.rules).message.required = true];
  // Host info.
  Host host = 4 [(validate.rules).message.required = true];
  // Peer state.
  string state = 5 [(validate.rules).string.min_len = 1];
  // Peer create time.
  google.protobuf.Timestamp created_at = 6 [(validate.rules).timestamp.required = true];
  // Peer update time.
  google.protobuf.Timestamp updated_at = 7 [(validate.rules).timestamp.required = true];
}

// Task metadata.
message Task{
  // Task id.
  string id = 1 [(validate.rules).string.min_len = 1];
  // Task type.
  string type = 2 [(validate.rules).string.uri = true];
  // Task size scope.
  common.SizeScope size_scope = 3;
  // Pieces of task.
  repeated common.Piece pieces = 4 [(validate.rules).repeated = {min_items: 1, ignore_empty: true}];
  // Task state.
  string state = 5 [(validate.rules).string.min_len = 1];
  // Task metadata.
  common.Metadata metadata = 6 [(validate.rules).message.required = true];
  // Task content length.
  int64 content_length = 7 [(validate.rules).int64.gte = 1];
  // Task peer count.
  int32 peer_count = 8 [(validate.rules).int32.gte = 0];
  // Task contains available peer.
  bool hasAvailablePeer = 9;
  // Task create time.
  google.protobuf.Timestamp created_at = 10 [(validate.rules).timestamp.required = true];
  // Task update time.
  google.protobuf.Timestamp updated_at = 11 [(validate.rules).timestamp.required = true];
}

// Host metadata.
message Host{
  // Host id.
  string id = 1 [(validate.rules).string.min_len = 1];
  // Host ipv4.
  string ipv4 = 2 [(validate.rules).string = {ipv4: true, ignore_empty: true}];
  // Host ipv6.
  string ipv6 = 3 [(validate.rules).string = {ipv6: true, ignore_empty: true}];
  // Peer hostname.
  string hostname = 4 [(validate.rules).string.hostname = true];
  // Port of grpc service.
  int32 port = 5 [(validate.rules).int32 = {gte: 1024, lt: 65535}];
  // Port of download server.
  int32 download_port = 6 [(validate.rules).int32 = {gte: 1024, lt: 65535}];
  // Security domain for network.
  string security_domain = 7 [(validate.rules).string = {min_len: 1, ignore_empty: true}];
  // Host location(area, country, province, city, etc.).
  repeated string location = 8 [(validate.rules).repeated = {min_items: 1, ignore_empty: true}];
  // IDC where the peer host is located.
  string idc = 9 [(validate.rules).string = {min_len: 1, ignore_empty: true}];
  // Network topology(switch, router, etc.).
  repeated string net_topology = 10 [(validate.rules).repeated = {min_items: 1, ignore_empty: true}];
}

// RegisteredRequest represents registered request of AnnouncePeerRequest.
message RegisterRequest {
  // Task id.
  string task_id = 1 [(validate.rules).string.min_len = 1];
  // Peer id.
  string peer_id = 2 [(validate.rules).string.min_len = 1];
  // Task metadata.
  common.Metadata metadata = 3 [(validate.rules).message.required = true];
  // Host info.
  Host host = 4 [(validate.rules).message.required = true];
  // Task type.
  common.TaskType task_type = 5;
}

// TaskDownloadStartedRequest represents peer download started request of AnnouncePeerRequest.
message PeerDownloadStartedRequest {
}

// PeerDownloadBackToSourceRequest represents peer download back-to-source request of AnnouncePeerRequest.
message PeerDownloadBackToSourceRequest {
  // Download back-to-source reason.
  string reason = 1 [(validate.rules).string.min_len = 1];
}

// PeerDownloadFinishedRequest represents peer download finished request of AnnouncePeerRequest.
message PeerDownloadFinishedRequest {
  // Total content length.
  int64 content_length = 1 [(validate.rules).int64.gte = 0];
  // Total piece count.
  int64 piece_count = 2 [(validate.rules).int64.gte = 0];
}

// PieceDownloadFinishedRequest represents piece download finished request of AnnouncePeerRequest.
message PieceDownloadFinishedRequest {
  // Piece info.
  common.Piece piece = 1 [(validate.rules).message.required = true];
}

// AnnouncePeerRequest represents request of AnnouncePeer.
message AnnouncePeerRequest{
  oneof request {
    option (validate.required) = true;

    RegisterRequest register_request = 1;
    PeerDownloadStartedRequest peer_download_started_request = 2;
    PeerDownloadBackToSourceRequest peer_download_back_to_source_request = 3;
    PeerDownloadFinishedRequest peer_download_finished_request = 4;
    PieceDownloadFinishedRequest piece_download_finished_request = 5;
    errordetails.PeerDownloadBackToSourceFailed peer_download_back_to_source_failed = 6;
    errordetails.PieceDownloadFailed piece_download_failed = 7;
    errordetails.PieceInfoSyncFailed piece_info_sync_failed = 8;
    errordetails.ScheduleFailed schedule_failed = 9;
  }
}

// TinyTaskResponse represents tiny task response of AnnouncePeerResponse.
message TinyTaskResponse {
  bytes data = 1 [(validate.rules).bytes.min_len = 1];
}

// SmallTaskResponse represents small task response of AnnouncePeerResponse.
message SmallTaskResponse {
  // Piece info.
  common.Piece piece = 1 [(validate.rules).message.required = true];
}

// NormalTaskResponse represents normal task response of AnnouncePeerResponse.
message NormalTaskResponse {
  // Candidate parents.
  repeated Peer candidate_parents = 1 [(validate.rules).repeated = {min_items: 1}];
  // Concurrent downloading count from main peer.
  int32 parallel_count = 2 [(validate.rules).int32.gte = 1];
}

// NeedBackToSourceResponse represents need back-to-source response of AnnouncePeerResponse.
message NeedBackToSourceResponse {
  // Download back-to-source reason.
  string reason = 1 [(validate.rules).string.min_len = 1];
}

// AnnouncePeerResponse represents response of AnnouncePeer.
message AnnouncePeerResponse{
  oneof response {
    option (validate.required) = true;

    TinyTaskResponse tiny_task_response = 1;
    SmallTaskResponse small_task_response = 2;
    NormalTaskResponse normal_task_response = 3;
    NeedBackToSourceResponse need_back_to_source_response = 4;
    errordetails.ScheduleFailed scheduleFailed = 5;
  }
}

// StatPeerRequest represents request of StatPeer.
message StatPeerRequest{
  // Task id.
  string task_id = 1 [(validate.rules).string.min_len = 1];
  // Peer id.
  string peer_id = 2 [(validate.rules).string.min_len = 1];
}

// TODO exchange peer request definition.
// ExchangePeerRequest represents request of ExchangePeer.
message ExchangePeerRequest{
  // Task id.
  string task_id = 1 [(validate.rules).string.min_len = 1];
  // Peer id.
  string peer_id = 2 [(validate.rules).string.min_len = 1];
}

// TODO exchange peer response definition.
// ExchangePeerResponse represents response of ExchangePeer.
message ExchangePeerResponse{
}

// LeavePeerRequest represents request of LeavePeer.
message LeavePeerRequest{
  // Peer id.
  string id = 1 [(validate.rules).string.min_len = 1];
}

// StatTaskRequest represents request of StatTask.
message StatTaskRequest{
  // Task id.
  string id = 1 [(validate.rules).string.min_len = 1];
}

// LeaveHostRequest represents request of LeaveHost.
message LeaveHostRequest{
  // Host id.
  string id = 1 [(validate.rules).string.min_len = 1];
}

// Scheduler RPC Service.
service Scheduler{
  // AnnouncePeer announces peer to scheduler.
  rpc AnnouncePeer(stream AnnouncePeerRequest) returns(stream AnnouncePeerResponse);

  // Checks information of peer.
  rpc StatPeer(StatPeerRequest)returns(Peer);

  // LeavePeer releases peer in scheduler.
  rpc LeavePeer(LeavePeerRequest)returns(google.protobuf.Empty);

  // TODO exchange peer api definition.
  // ExchangePeer exchanges peer information.
  rpc ExchangePeer(ExchangePeerRequest)returns(ExchangePeerResponse);

  // Checks information of task.
  rpc StatTask(StatTaskRequest)returns(Task);

  // LeaveHost releases host in scheduler.
  rpc LeaveHost(LeaveHostRequest)returns(google.protobuf.Empty);
}
