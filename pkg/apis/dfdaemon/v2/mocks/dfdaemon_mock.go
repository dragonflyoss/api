// Code generated by MockGen. DO NOT EDIT.
// Source: ../dfdaemon_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -destination dfdaemon_mock.go -source ../dfdaemon_grpc.pb.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "d7y.io/api/v2/pkg/apis/common/v2"
	dfdaemon "d7y.io/api/v2/pkg/apis/dfdaemon/v2"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockDfdaemonUploadClient is a mock of DfdaemonUploadClient interface.
type MockDfdaemonUploadClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonUploadClientMockRecorder
}

// MockDfdaemonUploadClientMockRecorder is the mock recorder for MockDfdaemonUploadClient.
type MockDfdaemonUploadClientMockRecorder struct {
	mock *MockDfdaemonUploadClient
}

// NewMockDfdaemonUploadClient creates a new mock instance.
func NewMockDfdaemonUploadClient(ctrl *gomock.Controller) *MockDfdaemonUploadClient {
	mock := &MockDfdaemonUploadClient{ctrl: ctrl}
	mock.recorder = &MockDfdaemonUploadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonUploadClient) EXPECT() *MockDfdaemonUploadClientMockRecorder {
	return m.recorder
}

// DeleteCacheTask mocks base method.
func (m *MockDfdaemonUploadClient) DeleteCacheTask(ctx context.Context, in *dfdaemon.DeleteCacheTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCacheTask", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCacheTask indicates an expected call of DeleteCacheTask.
func (mr *MockDfdaemonUploadClientMockRecorder) DeleteCacheTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCacheTask", reflect.TypeOf((*MockDfdaemonUploadClient)(nil).DeleteCacheTask), varargs...)
}

// DownloadCacheTask mocks base method.
func (m *MockDfdaemonUploadClient) DownloadCacheTask(ctx context.Context, in *dfdaemon.DownloadCacheTaskRequest, opts ...grpc.CallOption) (dfdaemon.DfdaemonUpload_DownloadCacheTaskClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadCacheTask", varargs...)
	ret0, _ := ret[0].(dfdaemon.DfdaemonUpload_DownloadCacheTaskClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadCacheTask indicates an expected call of DownloadCacheTask.
func (mr *MockDfdaemonUploadClientMockRecorder) DownloadCacheTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadCacheTask", reflect.TypeOf((*MockDfdaemonUploadClient)(nil).DownloadCacheTask), varargs...)
}

// DownloadPiece mocks base method.
func (m *MockDfdaemonUploadClient) DownloadPiece(ctx context.Context, in *dfdaemon.DownloadPieceRequest, opts ...grpc.CallOption) (*dfdaemon.DownloadPieceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadPiece", varargs...)
	ret0, _ := ret[0].(*dfdaemon.DownloadPieceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadPiece indicates an expected call of DownloadPiece.
func (mr *MockDfdaemonUploadClientMockRecorder) DownloadPiece(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPiece", reflect.TypeOf((*MockDfdaemonUploadClient)(nil).DownloadPiece), varargs...)
}

// DownloadTask mocks base method.
func (m *MockDfdaemonUploadClient) DownloadTask(ctx context.Context, in *dfdaemon.DownloadTaskRequest, opts ...grpc.CallOption) (dfdaemon.DfdaemonUpload_DownloadTaskClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadTask", varargs...)
	ret0, _ := ret[0].(dfdaemon.DfdaemonUpload_DownloadTaskClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadTask indicates an expected call of DownloadTask.
func (mr *MockDfdaemonUploadClientMockRecorder) DownloadTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTask", reflect.TypeOf((*MockDfdaemonUploadClient)(nil).DownloadTask), varargs...)
}

// StatCacheTask mocks base method.
func (m *MockDfdaemonUploadClient) StatCacheTask(ctx context.Context, in *dfdaemon.StatCacheTaskRequest, opts ...grpc.CallOption) (*common.CacheTask, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StatCacheTask", varargs...)
	ret0, _ := ret[0].(*common.CacheTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatCacheTask indicates an expected call of StatCacheTask.
func (mr *MockDfdaemonUploadClientMockRecorder) StatCacheTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatCacheTask", reflect.TypeOf((*MockDfdaemonUploadClient)(nil).StatCacheTask), varargs...)
}

// SyncPieces mocks base method.
func (m *MockDfdaemonUploadClient) SyncPieces(ctx context.Context, in *dfdaemon.SyncPiecesRequest, opts ...grpc.CallOption) (dfdaemon.DfdaemonUpload_SyncPiecesClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncPieces", varargs...)
	ret0, _ := ret[0].(dfdaemon.DfdaemonUpload_SyncPiecesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncPieces indicates an expected call of SyncPieces.
func (mr *MockDfdaemonUploadClientMockRecorder) SyncPieces(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncPieces", reflect.TypeOf((*MockDfdaemonUploadClient)(nil).SyncPieces), varargs...)
}

// MockDfdaemonUpload_DownloadTaskClient is a mock of DfdaemonUpload_DownloadTaskClient interface.
type MockDfdaemonUpload_DownloadTaskClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonUpload_DownloadTaskClientMockRecorder
}

// MockDfdaemonUpload_DownloadTaskClientMockRecorder is the mock recorder for MockDfdaemonUpload_DownloadTaskClient.
type MockDfdaemonUpload_DownloadTaskClientMockRecorder struct {
	mock *MockDfdaemonUpload_DownloadTaskClient
}

// NewMockDfdaemonUpload_DownloadTaskClient creates a new mock instance.
func NewMockDfdaemonUpload_DownloadTaskClient(ctrl *gomock.Controller) *MockDfdaemonUpload_DownloadTaskClient {
	mock := &MockDfdaemonUpload_DownloadTaskClient{ctrl: ctrl}
	mock.recorder = &MockDfdaemonUpload_DownloadTaskClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonUpload_DownloadTaskClient) EXPECT() *MockDfdaemonUpload_DownloadTaskClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDfdaemonUpload_DownloadTaskClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDfdaemonUpload_DownloadTaskClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDfdaemonUpload_DownloadTaskClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemonUpload_DownloadTaskClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDfdaemonUpload_DownloadTaskClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDfdaemonUpload_DownloadTaskClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDfdaemonUpload_DownloadTaskClient) Recv() (*dfdaemon.DownloadTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*dfdaemon.DownloadTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDfdaemonUpload_DownloadTaskClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemonUpload_DownloadTaskClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemonUpload_DownloadTaskClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemonUpload_DownloadTaskClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemonUpload_DownloadTaskClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDfdaemonUpload_DownloadTaskClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDfdaemonUpload_DownloadTaskClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskClient)(nil).Trailer))
}

// MockDfdaemonUpload_SyncPiecesClient is a mock of DfdaemonUpload_SyncPiecesClient interface.
type MockDfdaemonUpload_SyncPiecesClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonUpload_SyncPiecesClientMockRecorder
}

// MockDfdaemonUpload_SyncPiecesClientMockRecorder is the mock recorder for MockDfdaemonUpload_SyncPiecesClient.
type MockDfdaemonUpload_SyncPiecesClientMockRecorder struct {
	mock *MockDfdaemonUpload_SyncPiecesClient
}

// NewMockDfdaemonUpload_SyncPiecesClient creates a new mock instance.
func NewMockDfdaemonUpload_SyncPiecesClient(ctrl *gomock.Controller) *MockDfdaemonUpload_SyncPiecesClient {
	mock := &MockDfdaemonUpload_SyncPiecesClient{ctrl: ctrl}
	mock.recorder = &MockDfdaemonUpload_SyncPiecesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonUpload_SyncPiecesClient) EXPECT() *MockDfdaemonUpload_SyncPiecesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDfdaemonUpload_SyncPiecesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDfdaemonUpload_SyncPiecesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDfdaemonUpload_SyncPiecesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemonUpload_SyncPiecesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDfdaemonUpload_SyncPiecesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDfdaemonUpload_SyncPiecesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDfdaemonUpload_SyncPiecesClient) Recv() (*dfdaemon.SyncPiecesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*dfdaemon.SyncPiecesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDfdaemonUpload_SyncPiecesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemonUpload_SyncPiecesClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemonUpload_SyncPiecesClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemonUpload_SyncPiecesClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemonUpload_SyncPiecesClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDfdaemonUpload_SyncPiecesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDfdaemonUpload_SyncPiecesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesClient)(nil).Trailer))
}

// MockDfdaemonUpload_DownloadCacheTaskClient is a mock of DfdaemonUpload_DownloadCacheTaskClient interface.
type MockDfdaemonUpload_DownloadCacheTaskClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder
}

// MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder is the mock recorder for MockDfdaemonUpload_DownloadCacheTaskClient.
type MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder struct {
	mock *MockDfdaemonUpload_DownloadCacheTaskClient
}

// NewMockDfdaemonUpload_DownloadCacheTaskClient creates a new mock instance.
func NewMockDfdaemonUpload_DownloadCacheTaskClient(ctrl *gomock.Controller) *MockDfdaemonUpload_DownloadCacheTaskClient {
	mock := &MockDfdaemonUpload_DownloadCacheTaskClient{ctrl: ctrl}
	mock.recorder = &MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonUpload_DownloadCacheTaskClient) EXPECT() *MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDfdaemonUpload_DownloadCacheTaskClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDfdaemonUpload_DownloadCacheTaskClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDfdaemonUpload_DownloadCacheTaskClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDfdaemonUpload_DownloadCacheTaskClient) Recv() (*dfdaemon.DownloadCacheTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*dfdaemon.DownloadCacheTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemonUpload_DownloadCacheTaskClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemonUpload_DownloadCacheTaskClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDfdaemonUpload_DownloadCacheTaskClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDfdaemonUpload_DownloadCacheTaskClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskClient)(nil).Trailer))
}

// MockDfdaemonUploadServer is a mock of DfdaemonUploadServer interface.
type MockDfdaemonUploadServer struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonUploadServerMockRecorder
}

// MockDfdaemonUploadServerMockRecorder is the mock recorder for MockDfdaemonUploadServer.
type MockDfdaemonUploadServerMockRecorder struct {
	mock *MockDfdaemonUploadServer
}

// NewMockDfdaemonUploadServer creates a new mock instance.
func NewMockDfdaemonUploadServer(ctrl *gomock.Controller) *MockDfdaemonUploadServer {
	mock := &MockDfdaemonUploadServer{ctrl: ctrl}
	mock.recorder = &MockDfdaemonUploadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonUploadServer) EXPECT() *MockDfdaemonUploadServerMockRecorder {
	return m.recorder
}

// DeleteCacheTask mocks base method.
func (m *MockDfdaemonUploadServer) DeleteCacheTask(arg0 context.Context, arg1 *dfdaemon.DeleteCacheTaskRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCacheTask", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCacheTask indicates an expected call of DeleteCacheTask.
func (mr *MockDfdaemonUploadServerMockRecorder) DeleteCacheTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCacheTask", reflect.TypeOf((*MockDfdaemonUploadServer)(nil).DeleteCacheTask), arg0, arg1)
}

// DownloadCacheTask mocks base method.
func (m *MockDfdaemonUploadServer) DownloadCacheTask(arg0 *dfdaemon.DownloadCacheTaskRequest, arg1 dfdaemon.DfdaemonUpload_DownloadCacheTaskServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadCacheTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadCacheTask indicates an expected call of DownloadCacheTask.
func (mr *MockDfdaemonUploadServerMockRecorder) DownloadCacheTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadCacheTask", reflect.TypeOf((*MockDfdaemonUploadServer)(nil).DownloadCacheTask), arg0, arg1)
}

// DownloadPiece mocks base method.
func (m *MockDfdaemonUploadServer) DownloadPiece(arg0 context.Context, arg1 *dfdaemon.DownloadPieceRequest) (*dfdaemon.DownloadPieceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadPiece", arg0, arg1)
	ret0, _ := ret[0].(*dfdaemon.DownloadPieceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadPiece indicates an expected call of DownloadPiece.
func (mr *MockDfdaemonUploadServerMockRecorder) DownloadPiece(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPiece", reflect.TypeOf((*MockDfdaemonUploadServer)(nil).DownloadPiece), arg0, arg1)
}

// DownloadTask mocks base method.
func (m *MockDfdaemonUploadServer) DownloadTask(arg0 *dfdaemon.DownloadTaskRequest, arg1 dfdaemon.DfdaemonUpload_DownloadTaskServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadTask indicates an expected call of DownloadTask.
func (mr *MockDfdaemonUploadServerMockRecorder) DownloadTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTask", reflect.TypeOf((*MockDfdaemonUploadServer)(nil).DownloadTask), arg0, arg1)
}

// StatCacheTask mocks base method.
func (m *MockDfdaemonUploadServer) StatCacheTask(arg0 context.Context, arg1 *dfdaemon.StatCacheTaskRequest) (*common.CacheTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatCacheTask", arg0, arg1)
	ret0, _ := ret[0].(*common.CacheTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatCacheTask indicates an expected call of StatCacheTask.
func (mr *MockDfdaemonUploadServerMockRecorder) StatCacheTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatCacheTask", reflect.TypeOf((*MockDfdaemonUploadServer)(nil).StatCacheTask), arg0, arg1)
}

// SyncPieces mocks base method.
func (m *MockDfdaemonUploadServer) SyncPieces(arg0 *dfdaemon.SyncPiecesRequest, arg1 dfdaemon.DfdaemonUpload_SyncPiecesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncPieces", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncPieces indicates an expected call of SyncPieces.
func (mr *MockDfdaemonUploadServerMockRecorder) SyncPieces(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncPieces", reflect.TypeOf((*MockDfdaemonUploadServer)(nil).SyncPieces), arg0, arg1)
}

// MockUnsafeDfdaemonUploadServer is a mock of UnsafeDfdaemonUploadServer interface.
type MockUnsafeDfdaemonUploadServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDfdaemonUploadServerMockRecorder
}

// MockUnsafeDfdaemonUploadServerMockRecorder is the mock recorder for MockUnsafeDfdaemonUploadServer.
type MockUnsafeDfdaemonUploadServerMockRecorder struct {
	mock *MockUnsafeDfdaemonUploadServer
}

// NewMockUnsafeDfdaemonUploadServer creates a new mock instance.
func NewMockUnsafeDfdaemonUploadServer(ctrl *gomock.Controller) *MockUnsafeDfdaemonUploadServer {
	mock := &MockUnsafeDfdaemonUploadServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDfdaemonUploadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDfdaemonUploadServer) EXPECT() *MockUnsafeDfdaemonUploadServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDfdaemonUploadServer mocks base method.
func (m *MockUnsafeDfdaemonUploadServer) mustEmbedUnimplementedDfdaemonUploadServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDfdaemonUploadServer")
}

// mustEmbedUnimplementedDfdaemonUploadServer indicates an expected call of mustEmbedUnimplementedDfdaemonUploadServer.
func (mr *MockUnsafeDfdaemonUploadServerMockRecorder) mustEmbedUnimplementedDfdaemonUploadServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDfdaemonUploadServer", reflect.TypeOf((*MockUnsafeDfdaemonUploadServer)(nil).mustEmbedUnimplementedDfdaemonUploadServer))
}

// MockDfdaemonUpload_DownloadTaskServer is a mock of DfdaemonUpload_DownloadTaskServer interface.
type MockDfdaemonUpload_DownloadTaskServer struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonUpload_DownloadTaskServerMockRecorder
}

// MockDfdaemonUpload_DownloadTaskServerMockRecorder is the mock recorder for MockDfdaemonUpload_DownloadTaskServer.
type MockDfdaemonUpload_DownloadTaskServerMockRecorder struct {
	mock *MockDfdaemonUpload_DownloadTaskServer
}

// NewMockDfdaemonUpload_DownloadTaskServer creates a new mock instance.
func NewMockDfdaemonUpload_DownloadTaskServer(ctrl *gomock.Controller) *MockDfdaemonUpload_DownloadTaskServer {
	mock := &MockDfdaemonUpload_DownloadTaskServer{ctrl: ctrl}
	mock.recorder = &MockDfdaemonUpload_DownloadTaskServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonUpload_DownloadTaskServer) EXPECT() *MockDfdaemonUpload_DownloadTaskServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDfdaemonUpload_DownloadTaskServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemonUpload_DownloadTaskServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemonUpload_DownloadTaskServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemonUpload_DownloadTaskServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDfdaemonUpload_DownloadTaskServer) Send(arg0 *dfdaemon.DownloadTaskResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDfdaemonUpload_DownloadTaskServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDfdaemonUpload_DownloadTaskServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDfdaemonUpload_DownloadTaskServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemonUpload_DownloadTaskServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemonUpload_DownloadTaskServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDfdaemonUpload_DownloadTaskServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDfdaemonUpload_DownloadTaskServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDfdaemonUpload_DownloadTaskServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDfdaemonUpload_DownloadTaskServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDfdaemonUpload_DownloadTaskServer)(nil).SetTrailer), arg0)
}

// MockDfdaemonUpload_SyncPiecesServer is a mock of DfdaemonUpload_SyncPiecesServer interface.
type MockDfdaemonUpload_SyncPiecesServer struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonUpload_SyncPiecesServerMockRecorder
}

// MockDfdaemonUpload_SyncPiecesServerMockRecorder is the mock recorder for MockDfdaemonUpload_SyncPiecesServer.
type MockDfdaemonUpload_SyncPiecesServerMockRecorder struct {
	mock *MockDfdaemonUpload_SyncPiecesServer
}

// NewMockDfdaemonUpload_SyncPiecesServer creates a new mock instance.
func NewMockDfdaemonUpload_SyncPiecesServer(ctrl *gomock.Controller) *MockDfdaemonUpload_SyncPiecesServer {
	mock := &MockDfdaemonUpload_SyncPiecesServer{ctrl: ctrl}
	mock.recorder = &MockDfdaemonUpload_SyncPiecesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonUpload_SyncPiecesServer) EXPECT() *MockDfdaemonUpload_SyncPiecesServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDfdaemonUpload_SyncPiecesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemonUpload_SyncPiecesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemonUpload_SyncPiecesServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemonUpload_SyncPiecesServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDfdaemonUpload_SyncPiecesServer) Send(arg0 *dfdaemon.SyncPiecesResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDfdaemonUpload_SyncPiecesServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDfdaemonUpload_SyncPiecesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDfdaemonUpload_SyncPiecesServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemonUpload_SyncPiecesServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemonUpload_SyncPiecesServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDfdaemonUpload_SyncPiecesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDfdaemonUpload_SyncPiecesServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDfdaemonUpload_SyncPiecesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDfdaemonUpload_SyncPiecesServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDfdaemonUpload_SyncPiecesServer)(nil).SetTrailer), arg0)
}

// MockDfdaemonUpload_DownloadCacheTaskServer is a mock of DfdaemonUpload_DownloadCacheTaskServer interface.
type MockDfdaemonUpload_DownloadCacheTaskServer struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder
}

// MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder is the mock recorder for MockDfdaemonUpload_DownloadCacheTaskServer.
type MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder struct {
	mock *MockDfdaemonUpload_DownloadCacheTaskServer
}

// NewMockDfdaemonUpload_DownloadCacheTaskServer creates a new mock instance.
func NewMockDfdaemonUpload_DownloadCacheTaskServer(ctrl *gomock.Controller) *MockDfdaemonUpload_DownloadCacheTaskServer {
	mock := &MockDfdaemonUpload_DownloadCacheTaskServer{ctrl: ctrl}
	mock.recorder = &MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonUpload_DownloadCacheTaskServer) EXPECT() *MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDfdaemonUpload_DownloadCacheTaskServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemonUpload_DownloadCacheTaskServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDfdaemonUpload_DownloadCacheTaskServer) Send(arg0 *dfdaemon.DownloadCacheTaskResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDfdaemonUpload_DownloadCacheTaskServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemonUpload_DownloadCacheTaskServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDfdaemonUpload_DownloadCacheTaskServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDfdaemonUpload_DownloadCacheTaskServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDfdaemonUpload_DownloadCacheTaskServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDfdaemonUpload_DownloadCacheTaskServer)(nil).SetTrailer), arg0)
}

// MockDfdaemonDownloadClient is a mock of DfdaemonDownloadClient interface.
type MockDfdaemonDownloadClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonDownloadClientMockRecorder
}

// MockDfdaemonDownloadClientMockRecorder is the mock recorder for MockDfdaemonDownloadClient.
type MockDfdaemonDownloadClientMockRecorder struct {
	mock *MockDfdaemonDownloadClient
}

// NewMockDfdaemonDownloadClient creates a new mock instance.
func NewMockDfdaemonDownloadClient(ctrl *gomock.Controller) *MockDfdaemonDownloadClient {
	mock := &MockDfdaemonDownloadClient{ctrl: ctrl}
	mock.recorder = &MockDfdaemonDownloadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonDownloadClient) EXPECT() *MockDfdaemonDownloadClientMockRecorder {
	return m.recorder
}

// DeleteCacheTask mocks base method.
func (m *MockDfdaemonDownloadClient) DeleteCacheTask(ctx context.Context, in *dfdaemon.DeleteCacheTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCacheTask", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCacheTask indicates an expected call of DeleteCacheTask.
func (mr *MockDfdaemonDownloadClientMockRecorder) DeleteCacheTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCacheTask", reflect.TypeOf((*MockDfdaemonDownloadClient)(nil).DeleteCacheTask), varargs...)
}

// DeleteHost mocks base method.
func (m *MockDfdaemonDownloadClient) DeleteHost(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHost", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHost indicates an expected call of DeleteHost.
func (mr *MockDfdaemonDownloadClientMockRecorder) DeleteHost(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockDfdaemonDownloadClient)(nil).DeleteHost), varargs...)
}

// DeleteTask mocks base method.
func (m *MockDfdaemonDownloadClient) DeleteTask(ctx context.Context, in *dfdaemon.DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTask", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockDfdaemonDownloadClientMockRecorder) DeleteTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockDfdaemonDownloadClient)(nil).DeleteTask), varargs...)
}

// DownloadCacheTask mocks base method.
func (m *MockDfdaemonDownloadClient) DownloadCacheTask(ctx context.Context, in *dfdaemon.DownloadCacheTaskRequest, opts ...grpc.CallOption) (dfdaemon.DfdaemonDownload_DownloadCacheTaskClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadCacheTask", varargs...)
	ret0, _ := ret[0].(dfdaemon.DfdaemonDownload_DownloadCacheTaskClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadCacheTask indicates an expected call of DownloadCacheTask.
func (mr *MockDfdaemonDownloadClientMockRecorder) DownloadCacheTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadCacheTask", reflect.TypeOf((*MockDfdaemonDownloadClient)(nil).DownloadCacheTask), varargs...)
}

// DownloadTask mocks base method.
func (m *MockDfdaemonDownloadClient) DownloadTask(ctx context.Context, in *dfdaemon.DownloadTaskRequest, opts ...grpc.CallOption) (dfdaemon.DfdaemonDownload_DownloadTaskClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadTask", varargs...)
	ret0, _ := ret[0].(dfdaemon.DfdaemonDownload_DownloadTaskClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadTask indicates an expected call of DownloadTask.
func (mr *MockDfdaemonDownloadClientMockRecorder) DownloadTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTask", reflect.TypeOf((*MockDfdaemonDownloadClient)(nil).DownloadTask), varargs...)
}

// StatCacheTask mocks base method.
func (m *MockDfdaemonDownloadClient) StatCacheTask(ctx context.Context, in *dfdaemon.StatCacheTaskRequest, opts ...grpc.CallOption) (*common.CacheTask, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StatCacheTask", varargs...)
	ret0, _ := ret[0].(*common.CacheTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatCacheTask indicates an expected call of StatCacheTask.
func (mr *MockDfdaemonDownloadClientMockRecorder) StatCacheTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatCacheTask", reflect.TypeOf((*MockDfdaemonDownloadClient)(nil).StatCacheTask), varargs...)
}

// StatTask mocks base method.
func (m *MockDfdaemonDownloadClient) StatTask(ctx context.Context, in *dfdaemon.StatTaskRequest, opts ...grpc.CallOption) (*common.Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StatTask", varargs...)
	ret0, _ := ret[0].(*common.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatTask indicates an expected call of StatTask.
func (mr *MockDfdaemonDownloadClientMockRecorder) StatTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatTask", reflect.TypeOf((*MockDfdaemonDownloadClient)(nil).StatTask), varargs...)
}

// UploadCacheTask mocks base method.
func (m *MockDfdaemonDownloadClient) UploadCacheTask(ctx context.Context, in *dfdaemon.UploadCacheTaskRequest, opts ...grpc.CallOption) (*common.CacheTask, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadCacheTask", varargs...)
	ret0, _ := ret[0].(*common.CacheTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadCacheTask indicates an expected call of UploadCacheTask.
func (mr *MockDfdaemonDownloadClientMockRecorder) UploadCacheTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadCacheTask", reflect.TypeOf((*MockDfdaemonDownloadClient)(nil).UploadCacheTask), varargs...)
}

// UploadTask mocks base method.
func (m *MockDfdaemonDownloadClient) UploadTask(ctx context.Context, in *dfdaemon.UploadTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadTask", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTask indicates an expected call of UploadTask.
func (mr *MockDfdaemonDownloadClientMockRecorder) UploadTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTask", reflect.TypeOf((*MockDfdaemonDownloadClient)(nil).UploadTask), varargs...)
}

// MockDfdaemonDownload_DownloadTaskClient is a mock of DfdaemonDownload_DownloadTaskClient interface.
type MockDfdaemonDownload_DownloadTaskClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonDownload_DownloadTaskClientMockRecorder
}

// MockDfdaemonDownload_DownloadTaskClientMockRecorder is the mock recorder for MockDfdaemonDownload_DownloadTaskClient.
type MockDfdaemonDownload_DownloadTaskClientMockRecorder struct {
	mock *MockDfdaemonDownload_DownloadTaskClient
}

// NewMockDfdaemonDownload_DownloadTaskClient creates a new mock instance.
func NewMockDfdaemonDownload_DownloadTaskClient(ctrl *gomock.Controller) *MockDfdaemonDownload_DownloadTaskClient {
	mock := &MockDfdaemonDownload_DownloadTaskClient{ctrl: ctrl}
	mock.recorder = &MockDfdaemonDownload_DownloadTaskClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonDownload_DownloadTaskClient) EXPECT() *MockDfdaemonDownload_DownloadTaskClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDfdaemonDownload_DownloadTaskClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDfdaemonDownload_DownloadTaskClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDfdaemonDownload_DownloadTaskClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemonDownload_DownloadTaskClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDfdaemonDownload_DownloadTaskClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDfdaemonDownload_DownloadTaskClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDfdaemonDownload_DownloadTaskClient) Recv() (*dfdaemon.DownloadTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*dfdaemon.DownloadTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDfdaemonDownload_DownloadTaskClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemonDownload_DownloadTaskClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemonDownload_DownloadTaskClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemonDownload_DownloadTaskClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemonDownload_DownloadTaskClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDfdaemonDownload_DownloadTaskClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDfdaemonDownload_DownloadTaskClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskClient)(nil).Trailer))
}

// MockDfdaemonDownload_DownloadCacheTaskClient is a mock of DfdaemonDownload_DownloadCacheTaskClient interface.
type MockDfdaemonDownload_DownloadCacheTaskClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder
}

// MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder is the mock recorder for MockDfdaemonDownload_DownloadCacheTaskClient.
type MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder struct {
	mock *MockDfdaemonDownload_DownloadCacheTaskClient
}

// NewMockDfdaemonDownload_DownloadCacheTaskClient creates a new mock instance.
func NewMockDfdaemonDownload_DownloadCacheTaskClient(ctrl *gomock.Controller) *MockDfdaemonDownload_DownloadCacheTaskClient {
	mock := &MockDfdaemonDownload_DownloadCacheTaskClient{ctrl: ctrl}
	mock.recorder = &MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonDownload_DownloadCacheTaskClient) EXPECT() *MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDfdaemonDownload_DownloadCacheTaskClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDfdaemonDownload_DownloadCacheTaskClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDfdaemonDownload_DownloadCacheTaskClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDfdaemonDownload_DownloadCacheTaskClient) Recv() (*dfdaemon.DownloadCacheTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*dfdaemon.DownloadCacheTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemonDownload_DownloadCacheTaskClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemonDownload_DownloadCacheTaskClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDfdaemonDownload_DownloadCacheTaskClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDfdaemonDownload_DownloadCacheTaskClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskClient)(nil).Trailer))
}

// MockDfdaemonDownloadServer is a mock of DfdaemonDownloadServer interface.
type MockDfdaemonDownloadServer struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonDownloadServerMockRecorder
}

// MockDfdaemonDownloadServerMockRecorder is the mock recorder for MockDfdaemonDownloadServer.
type MockDfdaemonDownloadServerMockRecorder struct {
	mock *MockDfdaemonDownloadServer
}

// NewMockDfdaemonDownloadServer creates a new mock instance.
func NewMockDfdaemonDownloadServer(ctrl *gomock.Controller) *MockDfdaemonDownloadServer {
	mock := &MockDfdaemonDownloadServer{ctrl: ctrl}
	mock.recorder = &MockDfdaemonDownloadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonDownloadServer) EXPECT() *MockDfdaemonDownloadServerMockRecorder {
	return m.recorder
}

// DeleteCacheTask mocks base method.
func (m *MockDfdaemonDownloadServer) DeleteCacheTask(arg0 context.Context, arg1 *dfdaemon.DeleteCacheTaskRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCacheTask", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCacheTask indicates an expected call of DeleteCacheTask.
func (mr *MockDfdaemonDownloadServerMockRecorder) DeleteCacheTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCacheTask", reflect.TypeOf((*MockDfdaemonDownloadServer)(nil).DeleteCacheTask), arg0, arg1)
}

// DeleteHost mocks base method.
func (m *MockDfdaemonDownloadServer) DeleteHost(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHost indicates an expected call of DeleteHost.
func (mr *MockDfdaemonDownloadServerMockRecorder) DeleteHost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockDfdaemonDownloadServer)(nil).DeleteHost), arg0, arg1)
}

// DeleteTask mocks base method.
func (m *MockDfdaemonDownloadServer) DeleteTask(arg0 context.Context, arg1 *dfdaemon.DeleteTaskRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockDfdaemonDownloadServerMockRecorder) DeleteTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockDfdaemonDownloadServer)(nil).DeleteTask), arg0, arg1)
}

// DownloadCacheTask mocks base method.
func (m *MockDfdaemonDownloadServer) DownloadCacheTask(arg0 *dfdaemon.DownloadCacheTaskRequest, arg1 dfdaemon.DfdaemonDownload_DownloadCacheTaskServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadCacheTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadCacheTask indicates an expected call of DownloadCacheTask.
func (mr *MockDfdaemonDownloadServerMockRecorder) DownloadCacheTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadCacheTask", reflect.TypeOf((*MockDfdaemonDownloadServer)(nil).DownloadCacheTask), arg0, arg1)
}

// DownloadTask mocks base method.
func (m *MockDfdaemonDownloadServer) DownloadTask(arg0 *dfdaemon.DownloadTaskRequest, arg1 dfdaemon.DfdaemonDownload_DownloadTaskServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadTask indicates an expected call of DownloadTask.
func (mr *MockDfdaemonDownloadServerMockRecorder) DownloadTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTask", reflect.TypeOf((*MockDfdaemonDownloadServer)(nil).DownloadTask), arg0, arg1)
}

// StatCacheTask mocks base method.
func (m *MockDfdaemonDownloadServer) StatCacheTask(arg0 context.Context, arg1 *dfdaemon.StatCacheTaskRequest) (*common.CacheTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatCacheTask", arg0, arg1)
	ret0, _ := ret[0].(*common.CacheTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatCacheTask indicates an expected call of StatCacheTask.
func (mr *MockDfdaemonDownloadServerMockRecorder) StatCacheTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatCacheTask", reflect.TypeOf((*MockDfdaemonDownloadServer)(nil).StatCacheTask), arg0, arg1)
}

// StatTask mocks base method.
func (m *MockDfdaemonDownloadServer) StatTask(arg0 context.Context, arg1 *dfdaemon.StatTaskRequest) (*common.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatTask", arg0, arg1)
	ret0, _ := ret[0].(*common.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatTask indicates an expected call of StatTask.
func (mr *MockDfdaemonDownloadServerMockRecorder) StatTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatTask", reflect.TypeOf((*MockDfdaemonDownloadServer)(nil).StatTask), arg0, arg1)
}

// UploadCacheTask mocks base method.
func (m *MockDfdaemonDownloadServer) UploadCacheTask(arg0 context.Context, arg1 *dfdaemon.UploadCacheTaskRequest) (*common.CacheTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadCacheTask", arg0, arg1)
	ret0, _ := ret[0].(*common.CacheTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadCacheTask indicates an expected call of UploadCacheTask.
func (mr *MockDfdaemonDownloadServerMockRecorder) UploadCacheTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadCacheTask", reflect.TypeOf((*MockDfdaemonDownloadServer)(nil).UploadCacheTask), arg0, arg1)
}

// UploadTask mocks base method.
func (m *MockDfdaemonDownloadServer) UploadTask(arg0 context.Context, arg1 *dfdaemon.UploadTaskRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTask", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTask indicates an expected call of UploadTask.
func (mr *MockDfdaemonDownloadServerMockRecorder) UploadTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTask", reflect.TypeOf((*MockDfdaemonDownloadServer)(nil).UploadTask), arg0, arg1)
}

// MockUnsafeDfdaemonDownloadServer is a mock of UnsafeDfdaemonDownloadServer interface.
type MockUnsafeDfdaemonDownloadServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDfdaemonDownloadServerMockRecorder
}

// MockUnsafeDfdaemonDownloadServerMockRecorder is the mock recorder for MockUnsafeDfdaemonDownloadServer.
type MockUnsafeDfdaemonDownloadServerMockRecorder struct {
	mock *MockUnsafeDfdaemonDownloadServer
}

// NewMockUnsafeDfdaemonDownloadServer creates a new mock instance.
func NewMockUnsafeDfdaemonDownloadServer(ctrl *gomock.Controller) *MockUnsafeDfdaemonDownloadServer {
	mock := &MockUnsafeDfdaemonDownloadServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDfdaemonDownloadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDfdaemonDownloadServer) EXPECT() *MockUnsafeDfdaemonDownloadServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDfdaemonDownloadServer mocks base method.
func (m *MockUnsafeDfdaemonDownloadServer) mustEmbedUnimplementedDfdaemonDownloadServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDfdaemonDownloadServer")
}

// mustEmbedUnimplementedDfdaemonDownloadServer indicates an expected call of mustEmbedUnimplementedDfdaemonDownloadServer.
func (mr *MockUnsafeDfdaemonDownloadServerMockRecorder) mustEmbedUnimplementedDfdaemonDownloadServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDfdaemonDownloadServer", reflect.TypeOf((*MockUnsafeDfdaemonDownloadServer)(nil).mustEmbedUnimplementedDfdaemonDownloadServer))
}

// MockDfdaemonDownload_DownloadTaskServer is a mock of DfdaemonDownload_DownloadTaskServer interface.
type MockDfdaemonDownload_DownloadTaskServer struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonDownload_DownloadTaskServerMockRecorder
}

// MockDfdaemonDownload_DownloadTaskServerMockRecorder is the mock recorder for MockDfdaemonDownload_DownloadTaskServer.
type MockDfdaemonDownload_DownloadTaskServerMockRecorder struct {
	mock *MockDfdaemonDownload_DownloadTaskServer
}

// NewMockDfdaemonDownload_DownloadTaskServer creates a new mock instance.
func NewMockDfdaemonDownload_DownloadTaskServer(ctrl *gomock.Controller) *MockDfdaemonDownload_DownloadTaskServer {
	mock := &MockDfdaemonDownload_DownloadTaskServer{ctrl: ctrl}
	mock.recorder = &MockDfdaemonDownload_DownloadTaskServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonDownload_DownloadTaskServer) EXPECT() *MockDfdaemonDownload_DownloadTaskServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDfdaemonDownload_DownloadTaskServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemonDownload_DownloadTaskServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemonDownload_DownloadTaskServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemonDownload_DownloadTaskServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDfdaemonDownload_DownloadTaskServer) Send(arg0 *dfdaemon.DownloadTaskResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDfdaemonDownload_DownloadTaskServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDfdaemonDownload_DownloadTaskServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDfdaemonDownload_DownloadTaskServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemonDownload_DownloadTaskServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemonDownload_DownloadTaskServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDfdaemonDownload_DownloadTaskServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDfdaemonDownload_DownloadTaskServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDfdaemonDownload_DownloadTaskServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDfdaemonDownload_DownloadTaskServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDfdaemonDownload_DownloadTaskServer)(nil).SetTrailer), arg0)
}

// MockDfdaemonDownload_DownloadCacheTaskServer is a mock of DfdaemonDownload_DownloadCacheTaskServer interface.
type MockDfdaemonDownload_DownloadCacheTaskServer struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder
}

// MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder is the mock recorder for MockDfdaemonDownload_DownloadCacheTaskServer.
type MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder struct {
	mock *MockDfdaemonDownload_DownloadCacheTaskServer
}

// NewMockDfdaemonDownload_DownloadCacheTaskServer creates a new mock instance.
func NewMockDfdaemonDownload_DownloadCacheTaskServer(ctrl *gomock.Controller) *MockDfdaemonDownload_DownloadCacheTaskServer {
	mock := &MockDfdaemonDownload_DownloadCacheTaskServer{ctrl: ctrl}
	mock.recorder = &MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonDownload_DownloadCacheTaskServer) EXPECT() *MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDfdaemonDownload_DownloadCacheTaskServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemonDownload_DownloadCacheTaskServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDfdaemonDownload_DownloadCacheTaskServer) Send(arg0 *dfdaemon.DownloadCacheTaskResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDfdaemonDownload_DownloadCacheTaskServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemonDownload_DownloadCacheTaskServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDfdaemonDownload_DownloadCacheTaskServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDfdaemonDownload_DownloadCacheTaskServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDfdaemonDownload_DownloadCacheTaskServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDfdaemonDownload_DownloadCacheTaskServer)(nil).SetTrailer), arg0)
}
