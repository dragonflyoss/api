// Code generated by MockGen. DO NOT EDIT.
// Source: ../dfdaemon_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -destination dfdaemon_mock.go -source ../dfdaemon_grpc.pb.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "d7y.io/api/v2/pkg/apis/common/v2"
	dfdaemon "d7y.io/api/v2/pkg/apis/dfdaemon/v2"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockDfdaemonClient is a mock of DfdaemonClient interface.
type MockDfdaemonClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonClientMockRecorder
}

// MockDfdaemonClientMockRecorder is the mock recorder for MockDfdaemonClient.
type MockDfdaemonClientMockRecorder struct {
	mock *MockDfdaemonClient
}

// NewMockDfdaemonClient creates a new mock instance.
func NewMockDfdaemonClient(ctrl *gomock.Controller) *MockDfdaemonClient {
	mock := &MockDfdaemonClient{ctrl: ctrl}
	mock.recorder = &MockDfdaemonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonClient) EXPECT() *MockDfdaemonClientMockRecorder {
	return m.recorder
}

// DeleteTask mocks base method.
func (m *MockDfdaemonClient) DeleteTask(ctx context.Context, in *dfdaemon.DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTask", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockDfdaemonClientMockRecorder) DeleteTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockDfdaemonClient)(nil).DeleteTask), varargs...)
}

// DownloadPiece mocks base method.
func (m *MockDfdaemonClient) DownloadPiece(ctx context.Context, in *dfdaemon.DownloadPieceRequest, opts ...grpc.CallOption) (*dfdaemon.DownloadPieceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadPiece", varargs...)
	ret0, _ := ret[0].(*dfdaemon.DownloadPieceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadPiece indicates an expected call of DownloadPiece.
func (mr *MockDfdaemonClientMockRecorder) DownloadPiece(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPiece", reflect.TypeOf((*MockDfdaemonClient)(nil).DownloadPiece), varargs...)
}

// DownloadTask mocks base method.
func (m *MockDfdaemonClient) DownloadTask(ctx context.Context, in *dfdaemon.DownloadTaskRequest, opts ...grpc.CallOption) (dfdaemon.Dfdaemon_DownloadTaskClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadTask", varargs...)
	ret0, _ := ret[0].(dfdaemon.Dfdaemon_DownloadTaskClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadTask indicates an expected call of DownloadTask.
func (mr *MockDfdaemonClientMockRecorder) DownloadTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTask", reflect.TypeOf((*MockDfdaemonClient)(nil).DownloadTask), varargs...)
}

// GetPieceNumbers mocks base method.
func (m *MockDfdaemonClient) GetPieceNumbers(ctx context.Context, in *dfdaemon.GetPieceNumbersRequest, opts ...grpc.CallOption) (*dfdaemon.GetPieceNumbersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPieceNumbers", varargs...)
	ret0, _ := ret[0].(*dfdaemon.GetPieceNumbersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPieceNumbers indicates an expected call of GetPieceNumbers.
func (mr *MockDfdaemonClientMockRecorder) GetPieceNumbers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPieceNumbers", reflect.TypeOf((*MockDfdaemonClient)(nil).GetPieceNumbers), varargs...)
}

// StatTask mocks base method.
func (m *MockDfdaemonClient) StatTask(ctx context.Context, in *dfdaemon.StatTaskRequest, opts ...grpc.CallOption) (*common.Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StatTask", varargs...)
	ret0, _ := ret[0].(*common.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatTask indicates an expected call of StatTask.
func (mr *MockDfdaemonClientMockRecorder) StatTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatTask", reflect.TypeOf((*MockDfdaemonClient)(nil).StatTask), varargs...)
}

// UploadTask mocks base method.
func (m *MockDfdaemonClient) UploadTask(ctx context.Context, in *dfdaemon.UploadTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadTask", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTask indicates an expected call of UploadTask.
func (mr *MockDfdaemonClientMockRecorder) UploadTask(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTask", reflect.TypeOf((*MockDfdaemonClient)(nil).UploadTask), varargs...)
}

// MockDfdaemon_DownloadTaskClient is a mock of Dfdaemon_DownloadTaskClient interface.
type MockDfdaemon_DownloadTaskClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemon_DownloadTaskClientMockRecorder
}

// MockDfdaemon_DownloadTaskClientMockRecorder is the mock recorder for MockDfdaemon_DownloadTaskClient.
type MockDfdaemon_DownloadTaskClientMockRecorder struct {
	mock *MockDfdaemon_DownloadTaskClient
}

// NewMockDfdaemon_DownloadTaskClient creates a new mock instance.
func NewMockDfdaemon_DownloadTaskClient(ctrl *gomock.Controller) *MockDfdaemon_DownloadTaskClient {
	mock := &MockDfdaemon_DownloadTaskClient{ctrl: ctrl}
	mock.recorder = &MockDfdaemon_DownloadTaskClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemon_DownloadTaskClient) EXPECT() *MockDfdaemon_DownloadTaskClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDfdaemon_DownloadTaskClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDfdaemon_DownloadTaskClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDfdaemon_DownloadTaskClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDfdaemon_DownloadTaskClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemon_DownloadTaskClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemon_DownloadTaskClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDfdaemon_DownloadTaskClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDfdaemon_DownloadTaskClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDfdaemon_DownloadTaskClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDfdaemon_DownloadTaskClient) Recv() (*dfdaemon.DownloadTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*dfdaemon.DownloadTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDfdaemon_DownloadTaskClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDfdaemon_DownloadTaskClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemon_DownloadTaskClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemon_DownloadTaskClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemon_DownloadTaskClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemon_DownloadTaskClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemon_DownloadTaskClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemon_DownloadTaskClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockDfdaemon_DownloadTaskClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDfdaemon_DownloadTaskClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDfdaemon_DownloadTaskClient)(nil).Trailer))
}

// MockDfdaemonServer is a mock of DfdaemonServer interface.
type MockDfdaemonServer struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemonServerMockRecorder
}

// MockDfdaemonServerMockRecorder is the mock recorder for MockDfdaemonServer.
type MockDfdaemonServerMockRecorder struct {
	mock *MockDfdaemonServer
}

// NewMockDfdaemonServer creates a new mock instance.
func NewMockDfdaemonServer(ctrl *gomock.Controller) *MockDfdaemonServer {
	mock := &MockDfdaemonServer{ctrl: ctrl}
	mock.recorder = &MockDfdaemonServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemonServer) EXPECT() *MockDfdaemonServerMockRecorder {
	return m.recorder
}

// DeleteTask mocks base method.
func (m *MockDfdaemonServer) DeleteTask(arg0 context.Context, arg1 *dfdaemon.DeleteTaskRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockDfdaemonServerMockRecorder) DeleteTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockDfdaemonServer)(nil).DeleteTask), arg0, arg1)
}

// DownloadPiece mocks base method.
func (m *MockDfdaemonServer) DownloadPiece(arg0 context.Context, arg1 *dfdaemon.DownloadPieceRequest) (*dfdaemon.DownloadPieceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadPiece", arg0, arg1)
	ret0, _ := ret[0].(*dfdaemon.DownloadPieceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadPiece indicates an expected call of DownloadPiece.
func (mr *MockDfdaemonServerMockRecorder) DownloadPiece(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPiece", reflect.TypeOf((*MockDfdaemonServer)(nil).DownloadPiece), arg0, arg1)
}

// DownloadTask mocks base method.
func (m *MockDfdaemonServer) DownloadTask(arg0 *dfdaemon.DownloadTaskRequest, arg1 dfdaemon.Dfdaemon_DownloadTaskServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadTask indicates an expected call of DownloadTask.
func (mr *MockDfdaemonServerMockRecorder) DownloadTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTask", reflect.TypeOf((*MockDfdaemonServer)(nil).DownloadTask), arg0, arg1)
}

// GetPieceNumbers mocks base method.
func (m *MockDfdaemonServer) GetPieceNumbers(arg0 context.Context, arg1 *dfdaemon.GetPieceNumbersRequest) (*dfdaemon.GetPieceNumbersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPieceNumbers", arg0, arg1)
	ret0, _ := ret[0].(*dfdaemon.GetPieceNumbersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPieceNumbers indicates an expected call of GetPieceNumbers.
func (mr *MockDfdaemonServerMockRecorder) GetPieceNumbers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPieceNumbers", reflect.TypeOf((*MockDfdaemonServer)(nil).GetPieceNumbers), arg0, arg1)
}

// StatTask mocks base method.
func (m *MockDfdaemonServer) StatTask(arg0 context.Context, arg1 *dfdaemon.StatTaskRequest) (*common.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatTask", arg0, arg1)
	ret0, _ := ret[0].(*common.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatTask indicates an expected call of StatTask.
func (mr *MockDfdaemonServerMockRecorder) StatTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatTask", reflect.TypeOf((*MockDfdaemonServer)(nil).StatTask), arg0, arg1)
}

// UploadTask mocks base method.
func (m *MockDfdaemonServer) UploadTask(arg0 context.Context, arg1 *dfdaemon.UploadTaskRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTask", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTask indicates an expected call of UploadTask.
func (mr *MockDfdaemonServerMockRecorder) UploadTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTask", reflect.TypeOf((*MockDfdaemonServer)(nil).UploadTask), arg0, arg1)
}

// MockUnsafeDfdaemonServer is a mock of UnsafeDfdaemonServer interface.
type MockUnsafeDfdaemonServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDfdaemonServerMockRecorder
}

// MockUnsafeDfdaemonServerMockRecorder is the mock recorder for MockUnsafeDfdaemonServer.
type MockUnsafeDfdaemonServerMockRecorder struct {
	mock *MockUnsafeDfdaemonServer
}

// NewMockUnsafeDfdaemonServer creates a new mock instance.
func NewMockUnsafeDfdaemonServer(ctrl *gomock.Controller) *MockUnsafeDfdaemonServer {
	mock := &MockUnsafeDfdaemonServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDfdaemonServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDfdaemonServer) EXPECT() *MockUnsafeDfdaemonServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDfdaemonServer mocks base method.
func (m *MockUnsafeDfdaemonServer) mustEmbedUnimplementedDfdaemonServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDfdaemonServer")
}

// mustEmbedUnimplementedDfdaemonServer indicates an expected call of mustEmbedUnimplementedDfdaemonServer.
func (mr *MockUnsafeDfdaemonServerMockRecorder) mustEmbedUnimplementedDfdaemonServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDfdaemonServer", reflect.TypeOf((*MockUnsafeDfdaemonServer)(nil).mustEmbedUnimplementedDfdaemonServer))
}

// MockDfdaemon_DownloadTaskServer is a mock of Dfdaemon_DownloadTaskServer interface.
type MockDfdaemon_DownloadTaskServer struct {
	ctrl     *gomock.Controller
	recorder *MockDfdaemon_DownloadTaskServerMockRecorder
}

// MockDfdaemon_DownloadTaskServerMockRecorder is the mock recorder for MockDfdaemon_DownloadTaskServer.
type MockDfdaemon_DownloadTaskServerMockRecorder struct {
	mock *MockDfdaemon_DownloadTaskServer
}

// NewMockDfdaemon_DownloadTaskServer creates a new mock instance.
func NewMockDfdaemon_DownloadTaskServer(ctrl *gomock.Controller) *MockDfdaemon_DownloadTaskServer {
	mock := &MockDfdaemon_DownloadTaskServer{ctrl: ctrl}
	mock.recorder = &MockDfdaemon_DownloadTaskServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDfdaemon_DownloadTaskServer) EXPECT() *MockDfdaemon_DownloadTaskServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockDfdaemon_DownloadTaskServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDfdaemon_DownloadTaskServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDfdaemon_DownloadTaskServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockDfdaemon_DownloadTaskServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDfdaemon_DownloadTaskServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDfdaemon_DownloadTaskServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockDfdaemon_DownloadTaskServer) Send(arg0 *dfdaemon.DownloadTaskResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDfdaemon_DownloadTaskServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDfdaemon_DownloadTaskServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockDfdaemon_DownloadTaskServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockDfdaemon_DownloadTaskServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDfdaemon_DownloadTaskServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockDfdaemon_DownloadTaskServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDfdaemon_DownloadTaskServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDfdaemon_DownloadTaskServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockDfdaemon_DownloadTaskServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockDfdaemon_DownloadTaskServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDfdaemon_DownloadTaskServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockDfdaemon_DownloadTaskServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockDfdaemon_DownloadTaskServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDfdaemon_DownloadTaskServer)(nil).SetTrailer), arg0)
}
